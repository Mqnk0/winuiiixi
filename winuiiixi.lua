function base64_decode(data)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^' .. b .. '=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c = 0
        for i = 1, 8 do c = c + (x:sub(i, i) == '1' and 2 ^ (8 - i) or 0) end
        return string.char(c)
    end))
end
local encoded_code = 'DQpmdW5jdGlvbiB4Ql9BKHMpDQogICAgbG9jYWwgdj0nQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycNCiAgICBzID0gc3RyaW5nLmdzdWIocywgJ1teJy4udi4uJz1dJywgJycpDQogICAgcmV0dXJuIChzOmdzdWIoJy4nLCBmdW5jdGlvbih3KQ0KICAgICAgICBpZiAodyA9PSAnPScpIHRoZW4gcmV0dXJuICcnIGVuZA0KICAgICAgICBsb2NhbCBhLGI9JycsKHY6ZmluZCh3KS0xKQ0KICAgICAgICBmb3IgaT02LDEsLTEgZG8gYT1hLi4oYiUyXmktYiUyXihpLTEpPjAgYW5kICcxJyBvciAnMCcpIGVuZA0KICAgICAgICByZXR1cm4gYQ0KICAgIGVuZCk6Z3N1YignJWQlZCVkPyVkPyVkPyVkPyVkPyVkPycsIGZ1bmN0aW9uKHopDQogICAgICAgIGlmICgjeiB+PSA4KSB0aGVuIHJldHVybiAnJyBlbmQNCiAgICAgICAgbG9jYWwgbj0wDQogICAgICAgIGZvciBqPTEsOCBkbyBuPW4rKHo6c3ViKGosaik9PScxJyBhbmQgMl4oOC1qKSBvciAwKSBlbmQNCiAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyKG4pDQogICAgZW5kKSkNCmVuZA0KbG9jYWwgZW5jb2RlZF9wYXNzd29yZCA9ICJZWEZwTURrME56Z3pkV2RvYW10bmFEUTNOak00T1RVMmFIVnphR0ZuZFdSaGMyUTJPVGgzWVhOb1pIVmhkMmx6WjJSaGN6ZzNaRFkzT0RsaFozZFZabWRxZVdSbVoyRTNPRFkxTWpRNE56SXpObmszWjJoNVltUjFZV2RpWkhacWFHRmtaM2N5T0RZM05UYzRORE0xZEdjM2FtaG5jM1poWkdocVlYTm9aR0oyYm5kaGRtUmxlV2gxYW5kME9EazNNelJ5TmprM09EVTJNMmRvYW1KellRPT0iDQpsb2NhbCBjb3JyZWN0X3Bhc3N3b3JkID0geEJfQShlbmNvZGVkX3Bhc3N3b3JkKQ0KbG9jYWwgaXNfYXV0aGVudGljYXRlZCA9IGZhbHNlDQpmdW5jdGlvbiBwcm9tcHRfcGFzc3dvcmQoKQ0KICAgIGlmIGlzX2F1dGhlbnRpY2F0ZWQgdGhlbg0KICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgIGVuZA0KDQogICAgbG9jYWwgdXNlcl9pbnB1dCA9IGdnLnByb21wdCh7IkVudGVyIFBhc3N3b3JkOiJ9LCBuaWwsIHtnZy5UWVBFX1NUUklOR30pDQogICAgaWYgdXNlcl9pbnB1dCA9PSBuaWwgdGhlbg0KICAgICAgICBnZy5hbGVydCgiUGFzc3dvcmQgZW50cnkgd2FzIGNhbmNlbGVkLiIpDQogICAgICAgIG9zLmV4aXQoKQ0KICAgIGVsc2VpZiB1c2VyX2lucHV0WzFdID09IGNvcnJlY3RfcGFzc3dvcmQgdGhlbg0KICAgICAgICBnZy5hbGVydCgiUGFzc3dvcmQgaXMgY29ycmVjdCEgQWNjZXNzIGdyYW50ZWQuIikNCiAgICAgICAgaXNfYXV0aGVudGljYXRlZCA9IHRydWUNCiAgICAgICAgcmV0dXJuIHRydWUNCiAgICBlbHNlDQogICAgICAgIGdnLmFsZXJ0KCJJbmNvcnJlY3QgcGFzc3dvcmQhIikNCiAgICAgICAgb3MuZXhpdCgpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTWFpbigpDQogICAgbG9jYWwgb3B0aW9ucyA9IHsNCiAgICAgICAgeyLph43liptvbi9vZmYiLCBncmF2aXR5fSwNCiAgICAgICAgeyLluqfmqJnns7vjg6Hjg4vjg6Xjg7wiLCBDdXJyZW50fSwNCiAgICAgICAgeyLkurrnianns7vjg6Hjg4vjg6Xjg7wiLCBtb3ZlbWVudH0sDQogICAgICAgIHsi5q2m5Zmo57O744Oh44OL44Ol44O8Iiwgd2VhcG9uc30sDQogICAgICAgIHsi56m25qW144Gu6LaF44K144Kk44Ok5Lq644Kq44Oe44Oz44Kv44K577yB77yB77yB77yBIiwgb21hbmt1c3V9LA0KICAgICAgICB7IuatpuWZqFBhdGNoIiwgV2VhcG9uUGF0Y2h9LA0KICAgICAgICB7IuWuneeuseezu+ODoeODi+ODpeODvCIsIENoZXN0TWVudX0sDQogICAgICAgIHsi44KI44GT44KN44KP44Oh44OL44Ol44O8IiwgeW9rb3Jvd2F9LA0KICAgICAgICB7IuOBhuOCk+OBk++8kSIsIHVua299LA0KICAgICAgICB7Iue1guS6hiIsIG9zLmV4aXR9LA0KICAgIH0NCiAgICANCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIA0KICAgIGxvY2FsIE1lbnUgPSBnZy5jaG9pY2UobGFiZWxzLCBuaWwsICfjgZfjga3jgoRwb2xhcicpDQogICAgaWYgTWVudSA9PSBuaWwgdGhlbiANCiAgICAgICAgWVVOSSA9IDANCiAgICAgICAgcmV0dXJuDQogICAgZW5kDQogICAgDQogICAgb3B0aW9uc1tNZW51XVsyXSgpDQogICAgWVVOSSA9IDENCmVuZA0KDQpmdW5jdGlvbiBncmF2aXR5KCkNCiAgICBsb2NhbCBncmF2aXR5TGFiZWwgPSBpc3plcm9ncmF2aXR5KCkgYW5kICLnhKHph43lipsgW09OXSIgb3IgIueEoemHjeWKmyBbT0ZGXSINCiAgICBsb2NhbCBvcHRpb25zID0gew0KICAgICAgICB7Z3Jhdml0eUxhYmVsLCBpc3plcm9ncmF2aXR5fQ0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBZVU5JID0gLTENCmVuZA0KDQpmdW5jdGlvbiBpc3plcm9ncmF2aXR5KCkNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiQkE5MjEwMDBoIiwgZ2cuVFlQRV9RV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xKQ0KICAgIGxvY2FsIHJlc3VsdHMgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgaWYgI3Jlc3VsdHMgPiAwIHRoZW4NCiAgICAgICAgZ2cuZWRpdEFsbCgiQzFFMDAwMDBoIiwgZ2cuVFlQRV9RV09SRCkNCiAgICAgICAgZ2cudG9hc3QoIueEoemHjeWKmyBPRkYiKQ0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICBlbHNlDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNlYXJjaE51bWJlcigiQzFFMDAwMDBoIiwgZ2cuVFlQRV9RV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xKQ0KICAgICAgICByZXN1bHRzID0gZ2cuZ2V0UmVzdWx0cygxMDAwKQ0KICAgICAgICBpZiAjcmVzdWx0cyA+IDAgdGhlbg0KICAgICAgICAgICAgZ2cuZWRpdEFsbCgiQkE5MjEwMDBoIiwgZ2cuVFlQRV9RV09SRCkNCiAgICAgICAgICAgIGdnLnRvYXN0KCLnhKHph43lipsgT04iKQ0KICAgICAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCmVuZA0KDQoNCmZ1bmN0aW9uIEN1cnJlbnQoKQ0KICAgIGxvY2FsIG9wdGlvbnMgPSB7DQogICAgICAgIHsi54++5Zyo44Gu5bqn5qiZ44KS6KGo56S6IiwgTm93T059LA0KICAgICAgICB7IueZveODgeODvOODoOOBruWJjeOBq1RQIiwgd2hpdGViYXNlVFB9LA0KICAgICAgICB7Iui1pOODgeODvOODoOOBruWJjeOBq1RQIiwgcmVkYmFzZVRQfSwNCiAgICAgICAgeyLjgqvjgrnjgr/jg6Djg4bjg6zjg53jg7zjg4giLCBjdXN0b21UUH0sDQogICAgfQ0KICAgIGxvY2FsIGxhYmVscyA9IHt9DQogICAgZm9yIGkgPSAxLCAjb3B0aW9ucyBkbw0KICAgICAgICBsYWJlbHNbaV0gPSBvcHRpb25zW2ldWzFdDQogICAgZW5kDQogICAgbG9jYWwgc2l1Ym8gPSBnZy5tdWx0aUNob2ljZShsYWJlbHMsIG5pbCwgJ1BsYXlpbkVzY2FwZVBybycpDQogICAgaWYgc2l1Ym8gPT0gbmlsIHRoZW4gcmV0dXJuIGVuZA0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgaWYgc2l1Ym9baV0gdGhlbg0KICAgICAgICAgICAgb3B0aW9uc1tpXVsyXSgpDQogICAgICAgIGVuZA0KICAgIGVuZA0KICAgIFlVTkkgPSAtMg0KZW5kDQpmdW5jdGlvbiBzZWFyY2hDb29yZGluYXRlcygpDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjE3MTcwNDM2IiwgZ2cuVFlQRV9EV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xLCAwKQ0KICAgIHJldHVybiBnZy5nZXRSZXN1bHRzKGdnLmdldFJlc3VsdENvdW50KCkpDQplbmQNCg0KZnVuY3Rpb24gc2V0Q29vcmRpbmF0ZXMocmVzdWx0cywgeCwgeSwgeikNCiAgICBpZiAjcmVzdWx0cyA+IDAgdGhlbg0KICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgbG9jYWwgbiA9IDENCiAgICAgICAgZm9yIGkgPSAxLCAjcmVzdWx0cyBkbw0KICAgICAgICAgICAgYVtuXSA9IHsgYWRkcmVzcyA9IHJlc3VsdHNbaV0uYWRkcmVzcyAtIDEyLCBmbGFncyA9IGdnLlRZUEVfRkxPQVQsIHZhbHVlID0geCB9DQogICAgICAgICAgICBuID0gbiArIDENCiAgICAgICAgICAgIGFbbl0gPSB7IGFkZHJlc3MgPSByZXN1bHRzW2ldLmFkZHJlc3MgLSA4LCBmbGFncyA9IGdnLlRZUEVfRkxPQVQsIHZhbHVlID0geSB9DQogICAgICAgICAgICBuID0gbiArIDENCiAgICAgICAgICAgIGFbbl0gPSB7IGFkZHJlc3MgPSByZXN1bHRzW2ldLmFkZHJlc3MgLSA0LCBmbGFncyA9IGdnLlRZUEVfRkxPQVQsIHZhbHVlID0geiB9DQogICAgICAgICAgICBuID0gbiArIDENCiAgICAgICAgZW5kDQogICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICBnZy50b2FzdCgi5bqn5qiZ56e75YuV5oiQ5YqfIikNCiAgICBlbHNlDQogICAgICAgIGdnLnRvYXN0KCLmpJzntKLntZDmnpzjgYzopovjgaTjgYvjgorjgb7jgZvjgpPjgafjgZfjgZ8iKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE5vd09OKCkNCiAgICBsb2NhbCByZXN1bHRzID0gc2VhcmNoQ29vcmRpbmF0ZXMoKQ0KICAgIGlmICNyZXN1bHRzID4gMCB0aGVuDQogICAgICAgIGxvY2FsIGxhc3RSZXN1bHQgPSByZXN1bHRzWyNyZXN1bHRzXQ0KICAgICAgICBsb2NhbCBhID0gew0KICAgICAgICAgICAgeyBhZGRyZXNzID0gbGFzdFJlc3VsdC5hZGRyZXNzIC0gMTIsIGZsYWdzID0gZ2cuVFlQRV9GTE9BVCB9LA0KICAgICAgICAgICAgeyBhZGRyZXNzID0gbGFzdFJlc3VsdC5hZGRyZXNzIC0gOCwgZmxhZ3MgPSBnZy5UWVBFX0ZMT0FUIH0sDQogICAgICAgICAgICB7IGFkZHJlc3MgPSBsYXN0UmVzdWx0LmFkZHJlc3MgLSA0LCBmbGFncyA9IGdnLlRZUEVfRkxPQVQgfQ0KICAgICAgICB9DQogICAgICAgIGxvY2FsIHZhbHVlcyA9IGdnLmdldFZhbHVlcyhhKQ0KICAgICAgICBsb2NhbCBtZXNzYWdlID0gc3RyaW5nLmZvcm1hdCgi5pyA5b6M44Gu57WQ5p6c44Gu5bqn5qiZOlxuWDogJWRcblk6ICVkXG5aOiAlZCIsIG1hdGguZmxvb3IodmFsdWVzWzFdLnZhbHVlKSwgbWF0aC5mbG9vcih2YWx1ZXNbMl0udmFsdWUpLCBtYXRoLmZsb29yKHZhbHVlc1szXS52YWx1ZSkpDQogICAgICAgIGdnLmFsZXJ0KG1lc3NhZ2UpDQogICAgZWxzZQ0KICAgICAgICBnZy50b2FzdCgi5qSc57Si57WQ5p6c44GM6KaL44Gk44GL44KK44G+44Gb44KT44Gn44GX44GfIikNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiB3aGl0ZWJhc2VUUCgpDQogICAgc2V0Q29vcmRpbmF0ZXMoc2VhcmNoQ29vcmRpbmF0ZXMoKSwgMTI3LjM2MTk5MiwgMS4yMSwgLTExOS4xODAwMDApDQplbmQNCg0KZnVuY3Rpb24gcmVkYmFzZVRQKCkNCiAgICBzZXRDb29yZGluYXRlcyhzZWFyY2hDb29yZGluYXRlcygpLCAtMTI3LjM2MTk5MiwgMS4yMSwgLTExOS4xODAwMDApDQplbmQNCg0KZnVuY3Rpb24gY3VzdG9tVFAoKQ0KICAgIGxvY2FsIHJlc3VsdHMgPSBzZWFyY2hDb29yZGluYXRlcygpDQogICAgaWYgI3Jlc3VsdHMgPiAwIHRoZW4NCiAgICAgICAgbG9jYWwgaW5wdXQgPSBnZy5wcm9tcHQoDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgIljluqfmqJnjgpLlhaXlipvjgZfjgabjgY/jgaDjgZXjgYTvvIjkvos6IDbvvIkiLA0KICAgICAgICAgICAgICAgICJZ5bqn5qiZ44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GE77yI5L6LOiA5Oe+8iSIsDQogICAgICAgICAgICAgICAgIlrluqfmqJnjgpLlhaXlipvjgZfjgabjgY/jgaDjgZXjgYTvvIjkvos6IDbvvIkiDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgezAsIDAsIDB9LA0KICAgICAgICAgICAgeyJudW1iZXIiLCAibnVtYmVyIiwgIm51bWJlciJ9DQogICAgICAgICkNCiAgICAgICAgaWYgaW5wdXQgdGhlbg0KICAgICAgICAgICAgc2V0Q29vcmRpbmF0ZXMocmVzdWx0cywgaW5wdXRbMV0sIGlucHV0WzJdLCBpbnB1dFszXSkNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgZ2cudG9hc3QoIuW6p+aomeOBjOWFpeWKm+OBleOCjOOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgICAgIGVuZA0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQplbmQNCi0t5Lq654mp57O744Oh44OL44Ol44O8DQpmdW5jdGlvbiBtb3ZlbWVudCgpDQogICAgbG9jYWwgb3B0aW9ucyA9IHsNCiAgICAgICAgeyLjg4/jgqTjgrjjg6Pjg7Pjg5ciLCBIaWdoSnVtcH0sDQogICAgICAgIHsi44OP44Kk44K544OU44O844OJIOS4rSIsIEhpZ2hzcGVlZH0sDQogICAgICAgIHsi44OP44Kk44K544OU44O844OJIOS9jiIsIGxvd3NwZWVkfSwNCiAgICAgICAgeyLnhKHpmZDjgrjjg6Pjg7Pjg5ciLCBhaXJqdW1wfSwNCiAgICAgICAgeyLmsLTjgrjjg6Pjg7Pjg5ciLCB3YXRlcmp1bXB9LA0KICAgICAgICB7IuODkOODiOODreODr+eEoeaVtSIsIG11dGVraX0sDQogICAgICAgIHsi44Oo44Kz44Ot44Ov54Sh5pW1IiwgeW9rb3Jvd2FtdXRla2l9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCmZ1bmN0aW9uIEhpZ2hKdW1wKCkgLS3jg4/jgqTjgrjjg6Pjg7Pjg5cNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiMjA0NzYxNTE4OCIsIGdnLlRZUEVfRFdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSkNCiAgICBsb2NhbCByZXZlcnQgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBnZy5lZGl0QWxsKCIyMDQ4MTIwMDU5IiwgZ2cuVFlQRV9EV09SRCkNCiAgICBnZy5wcm9jZXNzUmVzdW1lKCkNCiAgICBnZy50b2FzdCgi44OP44Kk44K444Oj44Oz44OXT04iKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQplbmQNCmZ1bmN0aW9uIEhpZ2hzcGVlZCgpIC0t44OP44Kk44K544OU44O844OJDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjYuODc0NDE3MzYzNDI3MzQ0ZSsyOCIsIGdnLlRZUEVfRkxPQVQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICBsb2NhbCByZXZlcnQgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiByZXZlcnQgdGhlbg0KICAgICAgICBnZy5lZGl0QWxsKCI4LjAwMDAwMDJlMjYiLCBnZy5UWVBFX0ZMT0FUKQ0KICAgICAgICBnZy50b2FzdCgi44OP44Kk44K544OU44O844OJT04iKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCmVuZA0KZnVuY3Rpb24gbG93c3BlZWQoKSAtLeODj+OCpOOCueODlOODvOODiQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI2Ljg3NDQxNzM2MzQyNzM0NGUrMjgiLCBnZy5UWVBFX0ZMT0FULCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgbG9jYWwgcmV2ZXJ0ID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgcmV2ZXJ0IHRoZW4NCiAgICAgICAgZ2cuZWRpdEFsbCgiOTg3NDQxNzU2MzIwNjkzNzM0Mzk2MjU5MjA1MTIiLCBnZy5UWVBFX0ZMT0FUKQ0KICAgICAgICBnZy50b2FzdCgi44OP44Kk44K544OU44O844OJT04iKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCmVuZA0KZnVuY3Rpb24gYWlyanVtcCgpIC0t54Sh6ZmQ44K444Oj44Oz44OXDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0NfREFUQSkNCiAgICBnZy5zZWFyY2hOdW1iZXIoImg5QTk5OTkzRSIsIGdnLlRZUEVfQllURSwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xLCAwKQ0KICAgIA0KICAgIGxvY2FsIHJldmVydCA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIA0KICAgIGlmICNyZXZlcnQgPiAwIHRoZW4NCiAgICAgICAgZ2cuZWRpdEFsbCgiaDAwM0MxQzQ2MDAzQzFDNDYiLCBnZy5UWVBFX0JZVEUpDQogICAgICAgIGdnLnByb2Nlc3NSZXN1bWUoKQ0KICAgICAgICBnZy50b2FzdCgi54Sh6ZmQ44K444Oj44Oz44OXT04iKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQogICAgDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCmVuZA0KZnVuY3Rpb24gd2F0ZXJqdW1wKCkgLS3msLTjgrjjg6Pjg7Pjg5cNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiMSwxMjEsMTkzLDk2MCIsIGdnLlRZUEVfRFdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICBsb2NhbCByID0gZ2cuZ2V0UmVzdWx0cygxMDAwKQ0KICAgIGxvY2FsIGEgPSB7fQ0KICAgIGxvY2FsIG4gPSAxDQogICAgDQogICAgZm9yIGkgPSAxLCAjciBkbw0KICAgICAgYVtuXSA9IHt9DQogICAgICBhW25dLmFkZHJlc3MgPSByW2ldLmFkZHJlc3MgLSAweEE4DQogICAgICBhW25dLmZsYWdzID0gZ2cuVFlQRV9EV09SRA0KICAgICAgYVtuXS52YWx1ZSA9IDENCiAgICAgIG4gPSBuICsgMQ0KICAgIGVuZCANCiAgICBnZy5zZXRWYWx1ZXMoYSkNCiAgZW5kDQoNCiAgDQpmdW5jdGlvbiBtdXRla2koKSAtLeeEoeaVte+8iOODkOODiOODreODr+OBquOBqe+8iQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCJoNjQwMDAwMDAwMTAxMDAwMCIsIGdnLlRZUEVfQllURSwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xLCAwKQ0KICAgIGdnLnJlZmluZU51bWJlcigiMTAwIiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgbG9jYWwgciA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCg0KICAgIGlmIHIgdGhlbg0KICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgbG9jYWwgbiA9IDENCiAgICAgICAgZm9yIGkgPSAxLCAjciBkbw0KICAgICAgICAgICAgYVtuXSA9IHsgYWRkcmVzcyA9IHJbaV0uYWRkcmVzcyAtIDB4OCwgZmxhZ3MgPSBnZy5UWVBFX0RXT1JELCB2YWx1ZSA9IDk5OTk5IH0NCiAgICAgICAgICAgIG4gPSBuICsgMQ0KICAgICAgICBlbmQgDQogICAgICAgIGdnLnRvYXN0KCLnhKHmlbVPTiIpDQogICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQplbmQNCmZ1bmN0aW9uIHlva29yb3dhbXV0ZWtpKCkgLS3jgojjgZPjgo3jgo/jgoDjgabjgY0NCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiaDU4MDIwMDAwMDEwMTAwMDAiLCBnZy5UWVBFX0JZVEUsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICBnZy5yZWZpbmVOdW1iZXIoIjYwMCIsIGdnLlRZUEVfQllURSwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xLCAwKQ0KICAgIGxvY2FsIHIgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgbG9jYWwgYSA9IHt9DQogICAgbG9jYWwgbiA9IDENCg0KICAgIGZvciBpID0gMSwgI3IgZG8NCiAgICAgICAgYVtuXSA9IHsNCiAgICAgICAgICAgIGFkZHJlc3MgPSByW2ldLmFkZHJlc3MgLSAweDgsDQogICAgICAgICAgICBmbGFncyA9IGdnLlRZUEVfRFdPUkQsDQogICAgICAgICAgICB2YWx1ZSA9IDk5OTk5OSwNCiAgICAgICAgICAgIGZyZWV6ZSA9IHRydWUNCiAgICAgICAgfQ0KICAgICAgICBuID0gbiArIDENCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMoYSkNCiAgICBnZy5hZGRMaXN0SXRlbXMoYSkNCiAgICBnZy50b2FzdCgi44Oo44Kz44Ot44Ov54Sh5pW1IE9OIikNCmVuZA0KDQotLeatpuWZqOezu+ODoeODi+ODpeODvA0KDQpmdW5jdGlvbiB3ZWFwb25zKCkNCiAgICBsb2NhbCBvcHRpb25zID0gew0KICAgICAgICB7IuatpuWZqOmAo+WwhO+8i+WPjeaYoCIsIGhhbmVpfSwNCiAgICAgICAgeyLmrablmajmlLnpgKAgT0ZGIiwgbW9kd2VhcG9uT0ZGfSwNCiAgICAgICAgeyLmrablmajmlLnpgKAg44Gh44KH44GT44G344KK44Go44GLIiwgd2VhcG9uVjJ9LA0KICAgICAgICB7IuatpuWZqOaUuemAoCDnk7bjga7jgoTjgaTjgajjgYsiLCB3ZWFwb25WMX0sDQogICAgICAgIHsi5q2m5Zmo5pS56YCgIDEiLCBtb2R3ZWFwb25PTn0sDQogICAgICAgIHsi5q2m5Zmo5pS56YCgIDIiLCBtb2R3ZWFwb24yT059LA0KICAgICAgICB7IuatpuWZqOaUuemAoCAzIiwgbW9kd2VhcG9uM09OfSwNCiAgICAgICAgeyLmrablmajmlLnpgKAgNCIsIG1vZHdlYXBvbjRPTn0sDQogICAgICAgIHsi5q2m5Zmo5pS56YCgIDUiLCBtb2R3ZWFwb241T059LA0KICAgICAgICB7IuatpuWZqOmAo+WwhCDpgJrluLjjg6Ljg7zjg4kiLCByYXBpdGZpcmVOb21hbH0sDQogICAgICAgIHsiU1BBSeOCteODneODvOODiOODouODvOODiSIsIHJhcGl0ZmlyZXNwYWl9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCmZ1bmN0aW9uIG9tYW5rdXN1KCkNCiAgICBsb2NhbCBvcHRpb25zID0gew0KICAgICAgICB7IuatpuWZqOmAo+WwhO+8i+WPjeaYoCIsIGhhbmVpfSwNCiAgICAgICAgeyLmrablmajmlLnpgKAgT0ZGIiwgbW9kd2VhcG9uT0ZGfSwNCiAgICAgICAgeyLmrablmajmlLnpgKAg44Kq44Oe44Oz44Kv44K577yB77yBIiwgZ3VuVjF9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCmZ1bmN0aW9uIGd1blYxKCkNCiAgICBsb2NhbCBzZWFyY2hlcyA9IHsNCiAgICAgICAge3NlYXJjaCA9ICI3LDAzNyw2NzgsNzg1LDE3NSwxNDksNDY2IiwgZWRpdCA9ICI3LDEyMyw2MjIsMDY0LDMzNSw2MjcsMDI5In0sIC0t5bKp44G/44Gf44GE44Gq44Gu5oqV44GS44KL44KE44GkDQogICAgICAgIHtzZWFyY2ggPSAiOCw3MTQsMTI4LDIyOSwxMzcsMzA0LDk0NiIsIGVkaXQgPSAiOCw3MTMsNTg0LDcwNSwzMjAsODM1LDg2OCJ9LCAtLeOCi+OBi+OBjOODvOOCi1NBSQ0KICAgICAgICB7c2VhcmNoID0gIjQsMzQ4LDE1MCwyODcsOTAwLDg1MSwxMTgiLCBlZGl0ID0gIjcsNTg1LDUzOSw5NzMsMTUyLDMzMSwwNDMifSwgLS3nk7blhaXmiYsNCiAgICAgICAge3NlYXJjaCA9ICI0LDc3OSw2NTEsODEzLDg0NSw4MTAsMTg4IiwgZWRpdCA9ICI3LDUyMCwxNTEsNzUwLDM0NSwyODcsNTI5In0sIC0t44GP44Gj44GN44O85pKD44Gk44GL44GZ44G044Gh44Gu6YqDDQogICAgICAgIHtzZWFyY2ggPSAiNiw4MzAsMjUyLDIyNywxNzAsMDA0LDU0MCIsIGVkaXQgPSAiODM1NjczNTM1MDI4OTc5ODgwNCJ9LCAtLeaXp+eci+WuiOajkg0KICAgIH0NCiAgICBsb2NhbCBzdWNjZXNzQ291bnQgPSAwDQogICAgZm9yIGksIHYgaW4gaXBhaXJzKHNlYXJjaGVzKSBkbw0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICAgICAgZ2cuc2VhcmNoTnVtYmVyKHYuc2VhcmNoLCBnZy5UWVBFX1FXT1JELCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEpDQogICAgICAgIGxvY2FsIHIgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGlmICNyID4gMCB0aGVuDQogICAgICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgICAgIGZvciBqID0gMSwgI3IgZG8NCiAgICAgICAgICAgICAgICBhW2pdID0ge30NCiAgICAgICAgICAgICAgICBhW2pdLmFkZHJlc3MgPSByW2pdLmFkZHJlc3MgKyAweDEwDQogICAgICAgICAgICAgICAgYVtqXS5mbGFncyA9IGdnLlRZUEVfUVdPUkQNCiAgICAgICAgICAgICAgICBhW2pdLnZhbHVlID0gdi5lZGl0DQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICAgICAgc3VjY2Vzc0NvdW50ID0gc3VjY2Vzc0NvdW50ICsgMQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgaSAlIDUgPT0gMCB0aGVuDQogICAgICAgICAgICBnZy50b2FzdCgi5Yem55CG5LitLi4uICIgLi4gaSAuLiAi5YCL55uu44Gu6aCF55uu44KS5aSJ5pu05LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy50b2FzdCgi5aSJ5pu044KS5a6M5LqG44GX44G+44GX44GfOiAiIC4uIHN1Y2Nlc3NDb3VudCAuLiAi5Lu2IikNCmVuZA0KDQpmdW5jdGlvbiB3ZWFwb25WMSgpDQogICAgbG9jYWwgc2VhcmNoZXMgPSB7DQogICAgICAgIHtzZWFyY2ggPSAiNywwMzcsNjc4LDc4NSwxNzUsMTQ5LDQ2NiIsIGVkaXQgPSAiNTk1NzQ3MjgwNzUwOTg5ODc3NiJ9LCAtLeeTtiDmma7pgJoNCiAgICAgICAge3NlYXJjaCA9ICI4LDcxNCwxMjgsMjI5LDEzNywzMDQsOTQ2IiwgZWRpdCA9ICI3MDcyMDQyMjM0NDAyODkxNTU3In0sIC0t44Gv44KN44KB44GEDQogICAgICAgIHtzZWFyY2ggPSAiNCwzNDgsMTUwLDI4Nyw5MDAsODUxLDExOCIsIGVkaXQgPSAiNzU5NDg1NDkwMjUyMTAyNjUzNCJ9LCAtLVRQDQogICAgICAgIHtzZWFyY2ggPSAiNCw3NzksNjUxLDgxMyw4NDUsODEwLDE4OCIsIGVkaXQgPSAiNTk1NzQ3MjgyMDM5NDgwMDY2NCJ9LCAtLeeTtiDjgoDjgonjgZXjgY3jga7jgoTjgaQNCiAgICAgICAge3NlYXJjaCA9ICI2LDgzMCwyNTIsMjI3LDE3MCwwMDQsNTQwIiwgZWRpdCA9ICI1LDg2Nyw3MzYsMzQ2LDM3Niw2OTgsOTcwIn0sIC0t44Kw44Oq44O844OzDQogICAgfQ0KICAgIGxvY2FsIHN1Y2Nlc3NDb3VudCA9IDANCiAgICBmb3IgaSwgdiBpbiBpcGFpcnMoc2VhcmNoZXMpIGRvDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIodi5zZWFyY2gsIGdnLlRZUEVfUVdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSkNCiAgICAgICAgbG9jYWwgciA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCiAgICAgICAgaWYgI3IgPiAwIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIGEgPSB7fQ0KICAgICAgICAgICAgZm9yIGogPSAxLCAjciBkbw0KICAgICAgICAgICAgICAgIGFbal0gPSB7fQ0KICAgICAgICAgICAgICAgIGFbal0uYWRkcmVzcyA9IHJbal0uYWRkcmVzcyArIDB4MTANCiAgICAgICAgICAgICAgICBhW2pdLmZsYWdzID0gZ2cuVFlQRV9RV09SRA0KICAgICAgICAgICAgICAgIGFbal0udmFsdWUgPSB2LmVkaXQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZ2cuc2V0VmFsdWVzKGEpDQogICAgICAgICAgICBzdWNjZXNzQ291bnQgPSBzdWNjZXNzQ291bnQgKyAxDQogICAgICAgIGVuZA0KICAgICAgICBpZiBpICUgNSA9PSAwIHRoZW4NCiAgICAgICAgICAgIGdnLnRvYXN0KCLlh6bnkIbkuK0uLi4gIiAuLiBpIC4uICLlgIvnm67jga7poIXnm67jgpLlpInmm7TkuK0iKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnRvYXN0KCLlpInmm7TjgpLlrozkuobjgZfjgb7jgZfjgZ86ICIgLi4gc3VjY2Vzc0NvdW50IC4uICLku7YiKQ0KZW5kDQoNCmZ1bmN0aW9uIHdlYXBvblYyKCkNCiAgICBsb2NhbCBzZWFyY2hlcyA9IHsNCiAgICAgICAge3NlYXJjaCA9ICI3LDAzNyw2NzgsNzg1LDE3NSwxNDksNDY2IiwgZWRpdCA9ICI2NDQ5MzM2MTQ3NDQ0MjgxMzk3In0sIC0t56+E5Zuy5YaF44Gu5ZGz5pa544KS5b6p5rS744GV44Gb44KLDQogICAgICAgIHtzZWFyY2ggPSAiOCw3MTQsMTI4LDIyOSwxMzcsMzA0LDk0NiIsIGVkaXQgPSAiODE2NDQxODY5MzM5MzkyOTMyOCJ9LCAtLeeEoeaVteiyq+mAmueBq+OBrueOiQ0KICAgICAgICB7c2VhcmNoID0gIjQsMzQ4LDE1MCwyODcsOTAwLDg1MSwxMTgiLCBlZGl0ID0gIjUsMDA0LDEyNSwxNjEsNDc3LDI1MSwxMzQifSwgLS3mi5jmnZ/mp40NCiAgICAgICAge3NlYXJjaCA9ICI0LDc3OSw2NTEsODEzLDg0NSw4MTAsMTg4IiwgZWRpdCA9ICI3NTYyOTgyODIyMDg4MzQ2MDM0In0sIC0t54Sh5pW16LKr6YCa54Gr44Gu546JDQogICAgICAgIHtzZWFyY2ggPSAiNiw4MzAsMjUyLDIyNywxNzAsMDA0LDU0MCIsIGVkaXQgPSAiODM1NjczNTM1MDI4OTc5ODgwNCJ9LCAtLeeci+WuiOajkg0KICAgIH0NCiAgICBsb2NhbCBzdWNjZXNzQ291bnQgPSAwDQogICAgZm9yIGksIHYgaW4gaXBhaXJzKHNlYXJjaGVzKSBkbw0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICAgICAgZ2cuc2VhcmNoTnVtYmVyKHYuc2VhcmNoLCBnZy5UWVBFX1FXT1JELCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEpDQogICAgICAgIGxvY2FsIHIgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGlmICNyID4gMCB0aGVuDQogICAgICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgICAgIGZvciBqID0gMSwgI3IgZG8NCiAgICAgICAgICAgICAgICBhW2pdID0ge30NCiAgICAgICAgICAgICAgICBhW2pdLmFkZHJlc3MgPSByW2pdLmFkZHJlc3MgKyAweDEwDQogICAgICAgICAgICAgICAgYVtqXS5mbGFncyA9IGdnLlRZUEVfUVdPUkQNCiAgICAgICAgICAgICAgICBhW2pdLnZhbHVlID0gdi5lZGl0DQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICAgICAgc3VjY2Vzc0NvdW50ID0gc3VjY2Vzc0NvdW50ICsgMQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgaSAlIDUgPT0gMCB0aGVuDQogICAgICAgICAgICBnZy50b2FzdCgi5Yem55CG5LitLi4uICIgLi4gaSAuLiAi5YCL55uu44Gu6aCF55uu44KS5aSJ5pu05LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy50b2FzdCgi5aSJ5pu044KS5a6M5LqG44GX44G+44GX44GfOiAiIC4uIHN1Y2Nlc3NDb3VudCAuLiAi5Lu2IikNCmVuZA0KDQpmdW5jdGlvbiBtb2R3ZWFwb25PTigpDQogICAgbG9jYWwgc2VhcmNoZXMgPSB7DQogICAgICAgIHtzZWFyY2ggPSAiNywwMzcsNjc4LDc4NSwxNzUsMTQ5LDQ2NiIsIGVkaXQgPSAiNyw5MjgsNDg5LDkzNyw4MzYsOTQxLDQyOCJ9LC0t6buS44GE5YmjDQogICAgICAgIHtzZWFyY2ggPSAiOCw3MTQsMTI4LDIyOSwxMzcsMzA0LDk0NiIsIGVkaXQgPSAiNCw0NTksOTc1LDUyMSwwMjksMzkzLDMxMyJ9LC0tVUZPDQogICAgICAgIHtzZWFyY2ggPSAiNCwzNDgsMTUwLDI4Nyw5MDAsODUxLDExOCIsIGVkaXQgPSAiNzE3NjA0MDYzNjk1Njk2NDI3NCJ9LC0t54KO44Gu5YmjDQogICAgICAgIHtzZWFyY2ggPSAiNCw3NzksNjUxLDgxMyw4NDUsODEwLDE4OCIsIGVkaXQgPSAiNSw0OTAsMjY0LDY2NywyMTQsNDAyLDA2OSJ9LC0tU1BBSeOBruOCr+ODvOODq+OCv+OCpOODoOOCkuW+kOOAheOBq+a4m+WwkeOBleOBm+OCiw0KICAgICAgICB7c2VhcmNoID0gIjYsODMwLDI1MiwyMjcsMTcwLDAwNCw1NDAiLCBlZGl0ID0gIjUyOTg0NDYxOTIxNjUyNDcxNjQifSwtLeiyq+mAmumKgw0KICAgIH0NCiAgICBsb2NhbCBzdWNjZXNzQ291bnQgPSAwDQogICAgZm9yIGksIHYgaW4gaXBhaXJzKHNlYXJjaGVzKSBkbw0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICAgICAgZ2cuc2VhcmNoTnVtYmVyKHYuc2VhcmNoLCBnZy5UWVBFX1FXT1JELCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEpDQogICAgICAgIGxvY2FsIHIgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGlmICNyID4gMCB0aGVuDQogICAgICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgICAgIGZvciBqID0gMSwgI3IgZG8NCiAgICAgICAgICAgICAgICBhW2pdID0ge30NCiAgICAgICAgICAgICAgICBhW2pdLmFkZHJlc3MgPSByW2pdLmFkZHJlc3MgKyAweDEwDQogICAgICAgICAgICAgICAgYVtqXS5mbGFncyA9IGdnLlRZUEVfUVdPUkQNCiAgICAgICAgICAgICAgICBhW2pdLnZhbHVlID0gdi5lZGl0DQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICAgICAgc3VjY2Vzc0NvdW50ID0gc3VjY2Vzc0NvdW50ICsgMQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgaSAlIDUgPT0gMCB0aGVuDQogICAgICAgICAgICBnZy50b2FzdCgi5Yem55CG5LitLi4uICIgLi4gaSAuLiAi5YCL55uu44Gu6aCF55uu44KS5aSJ5pu05LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy50b2FzdCgi5aSJ5pu044KS5a6M5LqG44GX44G+44GX44GfOiAiIC4uIHN1Y2Nlc3NDb3VudCAuLiAi5Lu2IikNCmVuZA0KDQpmdW5jdGlvbiBtb2R3ZWFwb24yT04oKQ0KICAgIGxvY2FsIHNlYXJjaGVzID0gew0KICAgICAgICB7c2VhcmNoID0gIjcsMDM3LDY3OCw3ODUsMTc1LDE0OSw0NjYiLCBlZGl0ID0gIjc1OTQ4NTQ5MDI1MjEwMjY1MzQifSwtLeaVteOCkuWQuOOBhOi+vOOCgOmKgyAtLTc1OTQ4NTQ5MDI1MjEwMjY1MzQNCiAgICAgICAge3NlYXJjaCA9ICI4LDcxNCwxMjgsMjI5LDEzNywzMDQsOTQ2IiwgZWRpdCA9ICI3LDAxNCwxMTAsMzA2LDc1MSw2OTAsNTc2In0sLS1UUA0KICAgICAgICB7c2VhcmNoID0gIjQsMzQ4LDE1MCwyODcsOTAwLDg1MSwxMTgiLCBlZGl0ID0gIjkxNTQwMTAzNjE1NjAxNDI4NTcifSwtLeWNtQ0KICAgICAgICB7c2VhcmNoID0gIjQsNzc5LDY1MSw4MTMsODQ1LDgxMCwxODgiLCBlZGl0ID0gIjQzNDE4MzUzNjc0MTkzMDQ3ODIifSwtLea1geaYn+e+pA0KICAgICAgICB7c2VhcmNoID0gIjYsODMwLDI1MiwyMjcsMTcwLDAwNCw1NDAiLCBlZGl0ID0gIjU4NzQyMDg0MzY4OTE1MDkxMTIifSwtLeWkp+egsg0KICAgIH0NCiAgICBsb2NhbCBzdWNjZXNzQ291bnQgPSAwDQogICAgZm9yIGksIHYgaW4gaXBhaXJzKHNlYXJjaGVzKSBkbw0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICAgICAgZ2cuc2VhcmNoTnVtYmVyKHYuc2VhcmNoLCBnZy5UWVBFX1FXT1JELCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEpDQogICAgICAgIGxvY2FsIHIgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGlmICNyID4gMCB0aGVuDQogICAgICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgICAgIGZvciBqID0gMSwgI3IgZG8NCiAgICAgICAgICAgICAgICBhW2pdID0ge30NCiAgICAgICAgICAgICAgICBhW2pdLmFkZHJlc3MgPSByW2pdLmFkZHJlc3MgKyAweDEwDQogICAgICAgICAgICAgICAgYVtqXS5mbGFncyA9IGdnLlRZUEVfUVdPUkQNCiAgICAgICAgICAgICAgICBhW2pdLnZhbHVlID0gdi5lZGl0DQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICAgICAgc3VjY2Vzc0NvdW50ID0gc3VjY2Vzc0NvdW50ICsgMQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgaSAlIDUgPT0gMCB0aGVuDQogICAgICAgICAgICBnZy50b2FzdCgi5Yem55CG5LitLi4uICIgLi4gaSAuLiAi5YCL55uu44Gu6aCF55uu44KS5aSJ5pu05LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy50b2FzdCgi5aSJ5pu044KS5a6M5LqG44GX44G+44GX44GfOiAiIC4uIHN1Y2Nlc3NDb3VudCAuLiAi5Lu2IikNCmVuZA0KDQpmdW5jdGlvbiBtb2R3ZWFwb24zT04oKQ0KICAgIGxvY2FsIHNlYXJjaGVzID0gew0KICAgICAgICB7c2VhcmNoID0gIjcsMDM3LDY3OCw3ODUsMTc1LDE0OSw0NjYiLCBlZGl0ID0gIjYsNzkyLDg2NywzNzEsNTI4LDAzMiwxMTYifSwtLeOCt+ODo+ODnOODs+mKgyA9PiDjg7TjgYHjgovjgaQNCiAgICAgICAge3NlYXJjaCA9ICI4LDcxNCwxMjgsMjI5LDEzNywzMDQsOTQ2IiwgZWRpdCA9ICI2LDc5Miw4NjcsMzcxLDUyOCwwMzIsMTE2In0sLS3pgJrluLjjg4bjg6zjg53jg7zjg4ggPT4g44GB44KL44GkDQogICAgICAgIHtzZWFyY2ggPSAiNCwzNDgsMTUwLDI4Nyw5MDAsODUxLDExOCIsIGVkaXQgPSAiNiw1MDEsMjk2LDMwMSwwMjYsMTI2LDgxMyJ9LC0t44Kk44Oz44OR44Or44K5ID0+IOOBi+OBv+OBquOCig0KICAgICAgICB7c2VhcmNoID0gIjQsNzc5LDY1MSw4MTMsODQ1LDgxMCwxODgiLCBlZGl0ID0gIjYsNTAxLDI5NiwzMDEsMDI2LDEyNiw4MTMifSwtLeeBq+eCjumKgyA9PiDjgYvjgb/jgarjgooNCiAgICAgICAge3NlYXJjaCA9ICI2LDgzMCwyNTIsMjI3LDE3MCwwMDQsNTQwIiwgZWRpdCA9ICI2LDUwMSwyOTYsMzAxLDAyNiwxMjYsODEzIn0sLS3jg6rjg6Ljg5wgPT4g44GL44G/44Gq44KKDQogICAgfQ0KICAgIGxvY2FsIHN1Y2Nlc3NDb3VudCA9IDANCiAgICBmb3IgaSwgdiBpbiBpcGFpcnMoc2VhcmNoZXMpIGRvDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIodi5zZWFyY2gsIGdnLlRZUEVfUVdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSkNCiAgICAgICAgbG9jYWwgciA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCiAgICAgICAgaWYgI3IgPiAwIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIGEgPSB7fQ0KICAgICAgICAgICAgZm9yIGogPSAxLCAjciBkbw0KICAgICAgICAgICAgICAgIGFbal0gPSB7fQ0KICAgICAgICAgICAgICAgIGFbal0uYWRkcmVzcyA9IHJbal0uYWRkcmVzcyArIDB4MTANCiAgICAgICAgICAgICAgICBhW2pdLmZsYWdzID0gZ2cuVFlQRV9RV09SRA0KICAgICAgICAgICAgICAgIGFbal0udmFsdWUgPSB2LmVkaXQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZ2cuc2V0VmFsdWVzKGEpDQogICAgICAgICAgICBzdWNjZXNzQ291bnQgPSBzdWNjZXNzQ291bnQgKyAxDQogICAgICAgIGVuZA0KICAgICAgICBpZiBpICUgNSA9PSAwIHRoZW4NCiAgICAgICAgICAgIGdnLnRvYXN0KCLlh6bnkIbkuK0uLi4gIiAuLiBpIC4uICLlgIvnm67jga7poIXnm67jgpLlpInmm7TkuK0iKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnRvYXN0KCLlpInmm7TjgpLlrozkuobjgZfjgb7jgZfjgZ86ICIgLi4gc3VjY2Vzc0NvdW50IC4uICLku7YiKQ0KZW5kDQoNCmZ1bmN0aW9uIG1vZHdlYXBvbjRPTigpDQogICAgbG9jYWwgc2VhcmNoZXMgPSB7DQogICAgICAgIHtzZWFyY2ggPSAiNywwMzcsNjc4LDc4NSwxNzUsMTQ5LDQ2NiIsIGVkaXQgPSAiNzE2MDExNjk4MTI3ODgyMTY3NyJ9LC0t44K344Oj44Oc44Oz6YqDID0+IOmbtw0KICAgICAgICB7c2VhcmNoID0gIjgsNzE0LDEyOCwyMjksMTM3LDMwNCw5NDYiLCBlZGl0ID0gIjc1OTQ4NTQ5MDI1MjEwMjY1MzQifSwtLemAmuW4uOODhuODrOODneODvOODiCA9PiDnm67njonnhLzjgY3okL3jgajjgZkNCiAgICAgICAge3NlYXJjaCA9ICI0LDM0OCwxNTAsMjg3LDkwMCw4NTEsMTE4IiwgZWRpdCA9ICI1ODc0MjA4NDM2ODkxNTA5MTEyIn0sLS3jgqTjg7Pjg5Hjg6vjgrkgPT4g55uu546J54S844GNDQogICAgICAgIHtzZWFyY2ggPSAiNCw3NzksNjUxLDgxMyw4NDUsODEwLDE4OCIsIGVkaXQgPSAiNDM0MTgzNTM2NzQxOTMwNDc4MiJ9LC0t54Gr54KO6YqDID0+IOeTtg0KICAgICAgICB7c2VhcmNoID0gIjYsODMwLDI1MiwyMjcsMTcwLDAwNCw1NDAiLCBlZGl0ID0gIjkwMjExOTgzMTYxOTU2NTQ1MDAifSwtLeODquODouODnCA9PiDpu5LjgYTliaMNCiAgICB9DQogICAgbG9jYWwgc3VjY2Vzc0NvdW50ID0gMA0KICAgIGZvciBpLCB2IGluIGlwYWlycyhzZWFyY2hlcykgZG8NCiAgICAgICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICAgICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgICAgIGdnLnNlYXJjaE51bWJlcih2LnNlYXJjaCwgZ2cuVFlQRV9RV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xKQ0KICAgICAgICBsb2NhbCByID0gZ2cuZ2V0UmVzdWx0cygxMDAwKQ0KICAgICAgICBpZiAjciA+IDAgdGhlbg0KICAgICAgICAgICAgbG9jYWwgYSA9IHt9DQogICAgICAgICAgICBmb3IgaiA9IDEsICNyIGRvDQogICAgICAgICAgICAgICAgYVtqXSA9IHt9DQogICAgICAgICAgICAgICAgYVtqXS5hZGRyZXNzID0gcltqXS5hZGRyZXNzICsgMHgxMA0KICAgICAgICAgICAgICAgIGFbal0uZmxhZ3MgPSBnZy5UWVBFX1FXT1JEDQogICAgICAgICAgICAgICAgYVtqXS52YWx1ZSA9IHYuZWRpdA0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBnZy5zZXRWYWx1ZXMoYSkNCiAgICAgICAgICAgIHN1Y2Nlc3NDb3VudCA9IHN1Y2Nlc3NDb3VudCArIDENCiAgICAgICAgZW5kDQogICAgICAgIGlmIGkgJSA1ID09IDAgdGhlbg0KICAgICAgICAgICAgZ2cudG9hc3QoIuWHpueQhuS4rS4uLiAiIC4uIGkgLi4gIuWAi+ebruOBrumgheebruOCkuWkieabtOS4rSIpDQogICAgICAgIGVuZA0KICAgIGVuZA0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cudG9hc3QoIuWkieabtOOCkuWujOS6huOBl+OBvuOBl+OBnzogIiAuLiBzdWNjZXNzQ291bnQgLi4gIuS7tiIpDQplbmQNCg0KDQpmdW5jdGlvbiBtb2R3ZWFwb241T04oKQ0KICAgIGxvY2FsIHNlYXJjaGVzID0gew0KICAgICAgICB7c2VhcmNoID0gIjcsMDM3LDY3OCw3ODUsMTc1LDE0OSw0NjYiLCBlZGl0ID0gIjgzNTY3MzUzNTAyODk3OTg4MDQifSwtLeOCt+ODo+ODnOODs+mKgyA9PiDnnIvlrojjgobjgY3jgoXjgYYNCiAgICAgICAge3NlYXJjaCA9ICI4LDcxNCwxMjgsMjI5LDEzNywzMDQsOTQ2IiwgZWRpdCA9ICI4MzU2NzM1MzUwMjg5Nzk4ODA0In0sLS3pgJrluLjjg4bjg6zjg53jg7zjg4ggPT4g55yL5a6I44KG44GN44KF44GGDQogICAgICAgIHtzZWFyY2ggPSAiNCwzNDgsMTUwLDI4Nyw5MDAsODUxLDExOCIsIGVkaXQgPSAiOSwxMzksMDc4LDYwNywxMDQsNDE0LDM2OCJ9LC0t44Kk44Oz44OR44Or44K5ID0+IOOBqOOBhuOCgeOBhOOBiw0KICAgICAgICB7c2VhcmNoID0gIjQsNzc5LDY1MSw4MTMsODQ1LDgxMCwxODgiLCBlZGl0ID0gIjU4NzQyMDg0MzY4OTE1MDkxMTIifSwtLeeBq+eCjumKgyA9PiDjgZ/jgYTjgbvjgYYNCiAgICAgICAge3NlYXJjaCA9ICI2LDgzMCwyNTIsMjI3LDE3MCwwMDQsNTQwIiwgZWRpdCA9ICI1ODc0MjA4NDM2ODkxNTA5MTEyIn0sLS3jg6rjg6Ljg5wgPT4g44Gf44GE44G744GGDQogICAgfQ0KICAgIGxvY2FsIHN1Y2Nlc3NDb3VudCA9IDANCiAgICBmb3IgaSwgdiBpbiBpcGFpcnMoc2VhcmNoZXMpIGRvDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIodi5zZWFyY2gsIGdnLlRZUEVfUVdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSkNCiAgICAgICAgbG9jYWwgciA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCiAgICAgICAgaWYgI3IgPiAwIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIGEgPSB7fQ0KICAgICAgICAgICAgZm9yIGogPSAxLCAjciBkbw0KICAgICAgICAgICAgICAgIGFbal0gPSB7fQ0KICAgICAgICAgICAgICAgIGFbal0uYWRkcmVzcyA9IHJbal0uYWRkcmVzcyArIDB4MTANCiAgICAgICAgICAgICAgICBhW2pdLmZsYWdzID0gZ2cuVFlQRV9RV09SRA0KICAgICAgICAgICAgICAgIGFbal0udmFsdWUgPSB2LmVkaXQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZ2cuc2V0VmFsdWVzKGEpDQogICAgICAgICAgICBzdWNjZXNzQ291bnQgPSBzdWNjZXNzQ291bnQgKyAxDQogICAgICAgIGVuZA0KICAgICAgICBpZiBpICUgNSA9PSAwIHRoZW4NCiAgICAgICAgICAgIGdnLnRvYXN0KCLlh6bnkIbkuK0uLi4gIiAuLiBpIC4uICLlgIvnm67jga7poIXnm67jgpLlpInmm7TkuK0iKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnRvYXN0KCLlpInmm7TjgpLlrozkuobjgZfjgb7jgZfjgZ86ICIgLi4gc3VjY2Vzc0NvdW50IC4uICLku7YiKQ0KZW5kDQoNCg0KDQpmdW5jdGlvbiBtb2R3ZWFwb25PRkYoKQ0KICAgIGxvY2FsIHNlYXJjaGVzID0gew0KICAgICAgICB7c2VhcmNoID0gIjcsMDM3LDY3OCw3ODUsMTc1LDE0OSw0NjYiLCBlZGl0ID0gNDc4ODgzMTA3Mzc4NzUzMzQyNH0sDQogICAgICAgIHtzZWFyY2ggPSAiOCw3MTQsMTI4LDIyOSwxMzcsMzA0LDk0NiIsIGVkaXQgPSA4NzU0MzU3OTM3OTcyODIwNTEzfSwNCiAgICAgICAge3NlYXJjaCA9ICI0LDM0OCwxNTAsMjg3LDkwMCw4NTEsMTE4IiwgZWRpdCA9IDQ3MjA1MzI3MzU3NTg4NzM0ODF9LA0KICAgICAgICB7c2VhcmNoID0gIjQsNzc5LDY1MSw4MTMsODQ1LDgxMCwxODgiLCBlZGl0ID0gNDY0NDg5MDg4ODQxNTYwNjY5N30sDQogICAgICAgIHtzZWFyY2ggPSAiNiw4MzAsMjUyLDIyNywxNzAsMDA0LDU0MCIsIGVkaXQgPSA3MzU4NzQzMTEyNjM3NzEwODAzfSwNCiAgICB9DQogICAgbG9jYWwgc3VjY2Vzc0NvdW50ID0gMA0KICAgIGZvciBpLCB2IGluIGlwYWlycyhzZWFyY2hlcykgZG8NCiAgICAgICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICAgICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgICAgIGdnLnNlYXJjaE51bWJlcih2LnNlYXJjaCwgZ2cuVFlQRV9RV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xKQ0KICAgICAgICBsb2NhbCByID0gZ2cuZ2V0UmVzdWx0cygxMDAwKQ0KICAgICAgICBsb2NhbCBhID0ge30NCiAgICAgICAgZm9yIGogPSAxLCAjciBkbw0KICAgICAgICAgICAgYVtqXSA9IHt9DQogICAgICAgICAgICBhW2pdLmFkZHJlc3MgPSByW2pdLmFkZHJlc3MgKyAweDEwDQogICAgICAgICAgICBhW2pdLmZsYWdzID0gZ2cuVFlQRV9RV09SRA0KICAgICAgICAgICAgYVtqXS52YWx1ZSA9IHYuZWRpdA0KICAgICAgICBlbmQNCiAgICAgICAgaWYgI2EgPiAwIHRoZW4NCiAgICAgICAgICAgIGdnLnNldFZhbHVlcyhhKQ0KICAgICAgICAgICAgc3VjY2Vzc0NvdW50ID0gc3VjY2Vzc0NvdW50ICsgMQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgaSAlIDUgPT0gMCB0aGVuDQogICAgICAgICAgICBnZy50b2FzdCgi5Yem55CG5LitLi4uICIgLi4gaSAuLiAi5YCL55uu44Gu6aCF55uu44KS5aSJ5pu05LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy50b2FzdCgi5aSJ5pu044KS5a6M5LqG44GX44G+44GX44GfOiAiIC4uIHN1Y2Nlc3NDb3VudCAuLiAi5Lu2IikNCmVuZA0KDQoNCmZ1bmN0aW9uIHJhcGl0ZmlyZU5vbWFsKCkNCiAgICBsb2NhbCBwYXR0ZXJucyA9IHsNCiAgICAgICAgImgxMCBBQSA2RSA2NyIsICJoNjUgODggNzMgNkUiLCAiaDI1IDkwIDBEIDZBIiwgImg2MiBCOSBDMyA0QSIsDQogICAgICAgICJoREQgNjUgOUEgNEIiLCAiaDlGIDFFIDIxIDY2IiwgImhEOCBGNSA0NCA2MCIsICJoQTQgQ0YgRkUgNzgiLA0KICAgICAgICAiaDY5IEY4IDA0IDU4IiwgImgzRSBBQyBCNiA1NCIsICJoMkMgM0YgMEIgNjMiLCAiaDUwIDZCIEU3IDQwIg0KICAgIH0NCiAgICBsb2NhbCBvZmZzZXRzID0gey0weDQ0LCAtMHg4MCwgLTB4ODQsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNH0NCiAgICBmb3IgXywgcGF0dGVybiBpbiBpcGFpcnMocGF0dGVybnMpIGRvDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIocGF0dGVybiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgICAgIGxvY2FsIHJlc3VsdHMgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGxvY2FsIGFkZHJlc3NlcyA9IHt9DQogICAgICAgIGZvciBfLCByZXN1bHQgaW4gaXBhaXJzKHJlc3VsdHMpIGRvDQogICAgICAgICAgICBmb3IgXywgb2Zmc2V0IGluIGlwYWlycyhvZmZzZXRzKSBkbyAgDQogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGFkZHJlc3NlcywgeyBhZGRyZXNzID0gcmVzdWx0LmFkZHJlc3MgKyBvZmZzZXQsIGZsYWdzID0gZ2cuVFlQRV9EV09SRCwgdmFsdWUgPSAwIH0pDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQoNCiAgICAgICAgZ2cuc2V0VmFsdWVzKGFkZHJlc3NlcykNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiByYXBpdGZpcmVzcGFpKCkNCiAgICBsb2NhbCBwYXR0ZXJucyA9IHsNCiAgICAgICAgImg3RSA5MyA5MyA2QiIsICJoQUUgRkYgNzggM0QiLCAiaDI1IDkwIDBEIDZBIiwgImhBNCBDRiBGRSA3OCIsDQogICAgICAgICJoMkMgM0YgMEIgNjMiLCAiaDY5IEY4IDA0IDU4IiwgIjEsNTE1LDI4Miw5OTQiLCAiMSwxNjUsNTEwLDc4NSIsICJoNDUgNzggNDggODEiDQogICAgfQ0KDQogICAgbG9jYWwgb2Zmc2V0cyA9IHstMjAsIC0xNiwgMzIsIDM2fQ0KICAgIGxvY2FsIHNwZWNpYWxPZmZzZXRzID0gey0xMCwgMTAsIC0yNH0NCiAgICBmb3IgXywgcGF0dGVybiBpbiBpcGFpcnMocGF0dGVybnMpIGRvDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIocGF0dGVybiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgICAgIGxvY2FsIHJlc3VsdHMgPSBnZy5nZXRSZXN1bHRzKDEwMDApDQogICAgICAgIGxvY2FsIGFkZHJlc3NlcyA9IHt9DQogICAgICAgIGZvciBfLCByZXN1bHQgaW4gaXBhaXJzKHJlc3VsdHMpIGRvDQogICAgICAgICAgICBmb3IgXywgb2Zmc2V0IGluIGlwYWlycyhvZmZzZXRzKSBkbw0KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChhZGRyZXNzZXMsIHsgYWRkcmVzcyA9IHJlc3VsdC5hZGRyZXNzICsgb2Zmc2V0LCBmbGFncyA9IGdnLlRZUEVfRFdPUkQsIHZhbHVlID0gMCB9KQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBpZiBwYXR0ZXJuID09ICIxLDE2NSw1MTAsNzg1IiB0aGVuDQogICAgICAgICAgICAgICAgZm9yIF8sIG9mZnNldCBpbiBpcGFpcnMoc3BlY2lhbE9mZnNldHMpIGRvDQogICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChhZGRyZXNzZXMsIHsgYWRkcmVzcyA9IHJlc3VsdC5hZGRyZXNzICsgb2Zmc2V0LCBmbGFncyA9IGdnLlRZUEVfRFdPUkQsIHZhbHVlID0gMCB9KQ0KICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KDQogICAgICAgIGdnLnNldFZhbHVlcyhhZGRyZXNzZXMpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gaGFuZWkoKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgbG9jYWwgc2VhcmNoVmFsdWVzID0gew0KICAgICAgICB7ICIxNzM1MzA1NzQ0IiwgeyAtMHg0NCwgLTB4ODgsIC0weEEwLCAtMHgxNCwgLTB4MTAsIDB4MTAsIDB4MjAsIDB4MjQgfSwgIuODkeODs+ODgSIgfSwNCiAgICAgICAgeyAiMTAzMTMzOTk1MCIsIHsgLTB4NDQsIC0weDg4LCAtMHhBMCwgLTB4MTQsIC0weDEwLCAweDEwLCAweDIwLCAweDI0IH0sICJTQUnlhaXmiYvlmagiIH0sDQogICAgICAgIHsgIjE0NzY3MjA3NDUiLCB7IC0weDQ0LCAtMHg4NCwgLTB4QTAsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNCB9LCAiQUnjg6/jg7zjg5ciIH0sDQogICAgICAgIHsgIjExNjU1MTA3ODUiLCB7IC0weDQ0LCAtMHg4NCwgLTB4QTAsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNCB9LCAi55O2IiB9LA0KICAgICAgICB7ICIxMDg4OTA4MTEyIiwgeyAtMHg0NCwgLTB4ODgsIC0weEEwLCAtMHgxNCwgLTB4MTAsIDB4MTAsIDB4MjAsIDB4MjQgfSwgIuWkp+egsiIgfSwNCiAgICAgICAgeyAiMTg1MzA2NTMxNyIsIHsgLTB4NDQsIC0weDg0LCAtMHhBMCwgLTB4MTQsIC0weDEwLCAweDEwLCAweDIwLCAweDI0IH0sICLjgrDjg6zjg43jg7zjg4nns7siIH0sDQogICAgICAgIHsgIjEyNTQzNDA5NjIiLCB7IC0weDQ0LCAtMHgxNCwgLTB4MTAsIDB4MTAsIDB4MjAsIDB4MjQgfSwgIuS6uueLvOajkuOAgeeci+WuiOatpuWZqCIgfSwNCiAgICAgICAgeyAiMTUxNTI4Mjk5NCIsIHsgLTB4NDQsIC0weDgwLCAtMHg4NCwgLTB4MTQsIC0weDEwLCAweDEwLCAweDIwLCAweDI0IH0sICLmtYHmmJ/nvqQiIH0sDQogICAgICAgIHsgIjEyNjg0MDk4MjEiLCB7IC0weDQ0LCAtMHg4MCwgLTB4ODQsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNCB9LCAi6Laz5q2i44KBIiB9LA0KICAgICAgICB7ICIxNzc5MjczNzY1IiwgeyAtMHg0NCwgLTB4ODAsIC0weDg0LCAtMHgxNCwgLTB4MTAsIDB4MTAsIDB4MjAsIDB4MjQgfSwgIuODleOCuOODleOCuOaLmOadnyIgfSwNCiAgICAgICAgeyAiMTcxMzQ0NjU1OSIsIHsgLTB4NDQsIC0weDgwLCAtMHg4NCwgLTB4MTQsIC0weDEwLCAweDEwLCAweDIwLCAweDI0IH0sICLmsLTpiYTnoLLns7siIH0sDQogICAgICAgIHsgIjIwMjk5NjUyMjAiLCB7IC0weDQ0LCAtMHg4MCwgLTB4ODQsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNCB9LCAi44Kk44Oz44OR44Or44K5IiB9LA0KICAgICAgICB7ICIxNjE1MTMyMTIwIiwgeyAtMHg0NCwgLTB4ODAsIC0weDg0LCAtMHgxNCwgLTB4MTAsIDB4MTAsIDB4MjAsIDB4MjQgfSwgIuawtOmiqOiIuSIgfSwNCiAgICAgICAgeyAiMTY2MTY4MTQ1MiIsIHsgLTB4NDQsIC0weDgwLCAtMHg4NCwgLTB4MTQsIC0weDEwLCAweDEwLCAweDIwLCAweDI0IH0sICLjgorjgoLjgbwiIH0sDQogICAgICAgIHsgIjE4MDQ4MzM2NjIiLCB7IC0weDQ0LCAtMHg4MCwgLTB4ODQsIC0weDE0LCAtMHgxMCwgMHgxMCwgMHgyMCwgMHgyNCB9LCAi44Gq44Gr44GL44GX44KJ44KT44KE44GkIiB9DQogICAgfQ0KICAgIGxvY2FsIHN1Y2Nlc3NDb3VudCA9IDANCiAgICBmb3IgaW5kZXgsIHNlYXJjaEluZm8gaW4gaXBhaXJzKHNlYXJjaFZhbHVlcykgZG8NCiAgICAgICAgbG9jYWwgbnVtYmVyVG9TZWFyY2ggPSBzZWFyY2hJbmZvWzFdDQogICAgICAgIGxvY2FsIG9mZnNldHMgPSBzZWFyY2hJbmZvWzJdDQogICAgICAgIGxvY2FsIGl0ZW1OYW1lID0gc2VhcmNoSW5mb1szXQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIobnVtYmVyVG9TZWFyY2gsIGdnLlRZUEVfRFdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICAgICAgbG9jYWwgcmVzdWx0cyA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCiAgICAgICAgbG9jYWwgc2V0VmFsdWVzID0ge30NCiAgICAgICAgZm9yIF8sIHIgaW4gaXBhaXJzKHJlc3VsdHMpIGRvDQogICAgICAgICAgICBmb3IgXywgb2Zmc2V0IGluIGlwYWlycyhvZmZzZXRzKSBkbw0KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChzZXRWYWx1ZXMsIHsgYWRkcmVzcyA9IHIuYWRkcmVzcyArIG9mZnNldCwgZmxhZ3MgPSBnZy5UWVBFX0RXT1JELCB2YWx1ZSA9IDAgfSkNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgaWYgI3NldFZhbHVlcyA+IDAgdGhlbg0KICAgICAgICAgICAgZ2cuc2V0VmFsdWVzKHNldFZhbHVlcykNCiAgICAgICAgICAgIHN1Y2Nlc3NDb3VudCA9IHN1Y2Nlc3NDb3VudCArIDENCiAgICAgICAgZW5kDQogICAgICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgICAgIGlmIGluZGV4ICUgNSA9PSAwIHRoZW4NCiAgICAgICAgICAgIGdnLnRvYXN0KCLlh6bnkIbkuK0uLi4gIiAuLiBpbmRleCAuLiAi5YCL55uu44Gu44Ki44Kk44OG44Og44KS5Yem55CG5LitIikNCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgZ2cudG9hc3QoIuWkieabtOOBvuOBn+OBr+mAo+WwhOWPr+iDveOBq+OBl+OBn+mgheebrjogIiAuLiBzdWNjZXNzQ291bnQgLi4gIuS7tiIpDQplbmQNCg0KDQotLeatpuWZqFBhdGNoDQpmdW5jdGlvbiBXZWFwb25QYXRjaCgpDQogICAgbG9jYWwgb3B0aW9ucyA9IHsNCiAgICAgICAgeyLjgrDjg6rjg7zjg7Pmi5jmnZ8g54Sh5Yq5IiwgR3JlZW5EaXNhYmxlfSwNCiAgICAgICAgeyLmi5jmnZ/mp40g54Sh5Yq5IiwgUmVzdHJhaW50U3BlYXJEaXNhYmxlfSwNCiAgICAgICAgeyLjg4jjg6njg4Pjg5fnhKHlirkiLCBUcmFwRGlzYWJsZX0sDQogICAgICAgIHsi44OQ44Oq44KiIOeEoeWKuSIsIEJhcnJpZXJEaXNhYmxlfSwNCiAgICAgICAgeyJBSeODhuODrOODneODvOODiCDnhKHlirkiLCBBSXRlbGVwb3J0RGlzYWJsZX0sDQogICAgICAgIHsi44O044Kh44Or44OEU0FJIOeEoeWKuSIsIFZhcnR1RGlzYWJsZX0sDQogICAgICAgIHsi6ZqO5q61IOeEoeWKueWMliIsIGthaWRhbkRpc2FibGV9LA0KICAgICAgICB7IuWyqSDnhKHlirnljJYiLCBpd2FEaXNhYmxlfSwNCiAgICAgICAgeyLlmbTmsLQg54Sh5Yq55YyWIiwgaHVuc3VpRGlzYWJsZX0sDQogICAgICAgIHsi5Zue5b6p44Oq44Oi44O844OI44Oc44OgIOeEoeWKueWMliIsIGthaWh1a3VyaW1vYm9EaXNhYmxlfSwNCiAgICAgICAgeyLpm7cg54Sh5Yq55YyWIiwga2FtaW5hcmlEaXNhYmxlfSwNCiAgICAgICAgeyLlqIHlips1LzEwLzMw44Gu6YCj57aa5pS75pKDIOeEoeWKueWMliIsIHJlbnpva3VEaXNhYmxlfSwNCiAgICAgICAgeyLlqIHlipsxNeOBrueIhueZuuW8visy5YCL44Gu44Ki44Kk44OG44Og5YWl5omLIOeEoeWKueWMliIsIGJha3VoYXR1ZGFuRGlzYWJsZX0sDQogICAgICAgIHsi6ZqV55+zIOeEoeWKueWMliIsIEluc2VraURpc2FibGVEaXNhYmxlfSwNCiAgICAgICAgeyLngo7jga7liaMg54Sh5Yq55YyWIiwgRmlyZVN3b3JkRGlzYWJsZX0sDQogICAgICAgIHsi44OX44Os44K844Oz44OI44Oc44OD44Kv44K5IOeEoeWKueWMliIsIGJveGRpc2FibGV9LA0KICAgICAgICB7IuWRqOWbsuODgOODoeODvOOCuCDnhKHlirnljJYiLCBSYW5nZURhbWFnZURpc2FibGV9LA0KICAgICAgICB7IuWQuOihgOmsvOOBv+OBn+OBhOOBquOChOOBpCDnhKHlirnljJYiLCBkaXpoMn0sDQogICAgICAgIHsiUHVuY2hFU1AiLCBwdW5jaEVTUH0sDQogICAgICAgIHsi6YCj57aa5qC86ZeY5pS75pKDIOeEoeWKueWMliIsIGNvbnRpbnVvdXNBdHRhY2t9LA0KICAgICAgICB7Ium7kuOBhOWJoyDnhKHlirnljJYiLCBCbGFja1N3b3JkZGlzYWJsZX0sDQogICAgICAgIHsiVUZPIOeEoeWKueWMliIsIFVGT2Rpc2FibGV9LA0KICAgICAgICB7IuOCr+ODvOODq+OCv+OCpOODoOa4m+WwkSDnhKHlirnljJYiLCBjb29sdGltZURpc2FibGV9LA0KICAgICAgICB7IuODlOODg+OCseODqyDnhKHlirnljJYiLCBpY2VheGRpc2FibGV9LA0KICAgICAgICB7IuiKsSDnhKHlirnljJYiLCBmbG91cmRpc2FibGV9LA0KICAgICAgICB7IumzpeWxhSDnhKHlirnljJYiLCB0b3JpaWRpc2FibGV9LA0KICAgICAgICB7IuWkp+egsiDnhKHlirnljJYiLCB0YWlob3VkaXNhYmxlfSwNCiAgICAgICAgeyLpnZLjgYTjgq3jg6Pjg6njga7lmbTmsLQg54Sh5Yq55YyWIiwgaHVuc3VpRGlzYWJsZX0sDQogICAgICAgIHsi44OR44Oz44OB44Ki44Kk44K5IiwgcHVuY2hyZWNvdmVyeX0sDQogICAgICAgIHsi5Y2154Sh5Yq5IiwgZWdnZGlzYWJsZX0sDQogICAgICAgIHsi55uu546J54S844GN5YWl5omLIOeEoeWKuSIsIG1lZGFtYXlha2lEaXNhYmxlfSwNCiAgICAgICAgeyLjgqLjg4vjg6Hjg7zjgrfjg6fjg7PnhKHlirkiLCBvcHR9LA0KICAgICAgICB7IuWkiei6qyDnhKHlirkiLCBoZW5zaW5kaXNhYmxlfSwNCiAgICAgICAgeyLpgI/mmI7ljJYg54Sh5Yq5IiwgdG91bWVpa2FkaXNhYmxlfSwNCiAgICAgICAgeyLmtYHmmJ/nvqQg54Sh5Yq5Iiwgcnl1c2VpZ3VuRGlzYWJsZX0sDQogICAgICAgIHsi5Yik5a6a54Sh5Yq56Lu96YeP5YyWIiwgaGFudGVpbXVrb3VEaXNhYmxlfSwNCg0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBZVU5JID0gLTINCmVuZA0KDQpsb2NhbCBHcmVlblZhbHVlID0gNzU5NDg1NDkwMjUyMTAyNjUzNCAtLeOCsOODquODvOODsw0KbG9jYWwgUmVzdHJhaW50U3BlYXJWYWx1ZSA9IDkwMjExOTgzMTYxOTU2NTQ1MDAgLS3mi5jmnZ/mp40NCmxvY2FsIFRyYXBWYWx1ZSA9IDgxOTU0NDg2MTIzNDQwNDI3NjkgLS3jg4jjg6njg4Pjg5cNCmxvY2FsIEJhcnJpcmVWYWx1ZSA9IDU4Mzk3NTAyMzYzOTAyMTk5NDMgLS3jg5Djg6rjgqINCmxvY2FsIHRlbGVwb3J0VmFsdWUgPSA1ODY3NzM2MzQ2Mzc2Njk4OTcwIC0tdGVsZXBvcnQNCmxvY2FsIFZhcnR1VmFsdWUgPSA2NzkyODY3MzcxNTI4MDMyMTE2IC0t44O044Kh44Or44GkDQpsb2NhbCBrYWlkYW5WYWx1ZSA9IDg0NDc3MDcyMTU4MTYzMTI2NDcgLS3pmo7mrrUNCmxvY2FsIGl3YVZhbHVlID0gODUwMTY1OTQzOTY1NTAyMzM3MCAtLeWyqQ0KbG9jYWwgaHVuc3VpVmFsdWUgPSA0Njg4Mjg1MTg5Mjg1MDk1MzI1IC0t5Zm05rC0DQpsb2NhbCBrYWlodWt1cmltb2JvVmFsdWUgPSA4NDc2MTU3NDU3MTQ4NzYyMzY3IC0t5Zue5b6p44Oq44Oi44O844OI44Oc44OgDQpsb2NhbCBrYW1pbmFyaVZhbHVlID0gNjUwMTI5NjMwMTAyNjEyNjgxMyAtLembtw0KbG9jYWwgcmVuem9rdTVWYWx1ZSA9IDcxNzYwMzE2MzkwMDA0NzkxNTQgLS3pgKPntprmlLvmkoPjga7liaMNCmxvY2FsIGJha3VoYXR1ZGFuVmFsdWUgPSA1MDA0MTI1MTYxNDc3MjUxMTM0IC0t54iG55m65by+K+S6jOWAi+OBruatpuWZqOOCkuWFpeaJiw0KbG9jYWwgaW5zZWtpVmFsdWUgPSA5MTYzMjY5MTM4NTI2Mzk5NjYwIC0t6ZqV55+zDQpsb2NhbCBGaXJlU3dvcmRWYWx1ZSA9IDcxNzYwNDA2MzY5NTY5NjQyNzQgLS3ngo7jga7liaMNCmxvY2FsIFByZXNlbnRCb3hWYWx1ZSA9IDUwMzM4MzQxNDYwNTUzMDc5NDEgLS3jg5fjg6zjgrzjg7Pjg4jjg5zjg4Pjgq/jgrkNCmxvY2FsIFJhbmdlRGFtYWdlVmFsdWUgPSA0MzQyNjY2MTEyODc4NzgzMTA1IC0t5ZGo5Zuy44OA44Oh44O844K4DQpsb2NhbCBvbmRhaGl2ZSA9IDQ3OTI1NDQ3NTU5MTU1OTMwNDAgLS0tZHdkdw0KbG9jYWwgcHVuY2hWYWx1ZSA9IDc1NjY0MjExODgyMjI3MzUzNTQgLS0tZHdkdw0KbG9jYWwgY29udGludW91c0F0dCA9IDcxMTYwMjQ0NDMyODA4OTczNzcgLS3pgKPntprmoLzpl5jmlLvmkoPvvIjjgYjjgajvvIkNCmxvY2FsIEJsYWNrU3dvcmQgPSA3OTI4NDg5OTM3ODM2OTQxNDI4IC0t6buS44GE5YmjDQpsb2NhbCBVRk92YWx1ZSA9IDQ0NTk5NzU1MjEwMjkzOTMzMTMgLS1VRk8NCmxvY2FsIENvb2x0aW1lU0FJVmFsdWUgPSA1NDkwMjY0NjY3MjE0NDAyMDY5IC0t44GP44O844KL44Gf44GE44KA44GS44KT44GX44KH44GGDQpsb2NhbCBpY2VheHZhbHVlID0gODI4NTI1OTIyNjA4NzYzMzQzMyAtLeODlOODg+OCseODqw0KbG9jYWwgZmxvd2VydmFsdWUgPSA4NjM3NzQ2NzI0MDAwOTg2NTAzIC0t6IqxDQpsb2NhbCB0b3JpaXZhbHVlID0gNDQ1NTc3ODc3OTYzNDQ2OTk2NyAtLemzpeWxhQ0KDQotLeOBoeOBquOBv+OBq+ODquOCvOODq+OBr+OBi+OCieOBtOOBoeOBp+aKnOOBhOOBpuOCiw0KZnVuY3Rpb24gR3JlZW5EaXNhYmxlKCkgLS0g44Kw44Oq44O844OzDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKEdyZWVuVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBSZXN0cmFpbnRTcGVhckRpc2FibGUoKSAtLeaLmOadn+anjQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihSZXN0cmFpbnRTcGVhclZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gVHJhcERpc2FibGUoKSAtLeODiOODqeODg+ODlw0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI2NTAxMjk2MzAxMDI2MTI2ODEzIiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihUcmFwVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBCYXJyaWVyRGlzYWJsZSgpIC0t44OQ44Oq44KiDQogICAgICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgICAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgICAgIA0KICAgICAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICAgICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICAgICAgZ2cuc2VhcmNoTnVtYmVyKEJhcnJpcmVWYWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICAgICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgICAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICAgICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgICAgIGVuZA0KICAgICAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBBSXRlbGVwb3J0RGlzYWJsZSgpDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHRlbGVwb3J0VmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBWYXJ0dURpc2FibGUoKSAtLeODtOOCoeODq+ODhFNBSQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihWYXJ0dVZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24ga2FpZGFuRGlzYWJsZSgpIC0t6ZqO5q61DQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKGthaWRhblZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gaXdhRGlzYWJsZSgpIC0t5bKpDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKGl3YVZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gaHVuc3VpRGlzYWJsZSgpIC0t5Zm05rC0DQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKGh1bnN1aVZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24ga2FpaHVrdXJpbW9ib0Rpc2FibGUoKSAtLeWbnuW+qeODquODouODvOODiOODnOODoA0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihrYWlodWt1cmltb2JvVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBrYW1pbmFyaURpc2FibGUoKSAtLembtw0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihrYW1pbmFyaVZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gcmVuem9rdURpc2FibGUoKSAtLeWogeWKmzUvMTAvMzDjga7pgKPntprmlLvmkoMNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNzU2NjQyMTE4ODIyMjczNTM1NCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIocmVuem9rdTV2YWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIGJha3VoYXR1ZGFuRGlzYWJsZSgpIC0t5aiB5YqbMTXjga7niIbnmbrlvL4rMuWAi+OBruOCouOCpOODhuODoOWFpeaJiw0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihiYWt1aGF0dWRhblZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gSW5zZWtpRGlzYWJsZSgpIC0t5aiB5YqbMzDjga7pmpXnn7Pou73ph4/ljJYNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNzU2NjQyMTE4ODIyMjczNTM1NCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoaW5zZWtpVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBGaXJlU3dvcmREaXNhYmxlKCkgLS3ngo7jga7liaMNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNzU2NjQyMTE4ODIyMjczNTM1NCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoRmlyZVN3b3JkVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBib3hkaXNhYmxlKCkgLS3jg5fjg6zjgrzjg7Pjg4jjg5zjg4Pjgq/jgrkNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNzU2NjQyMTE4ODIyMjczNTM1NCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoUHJlc2VudEJveFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gUmFuZ2VEYW1hZ2VEaXNhYmxlKCkgLS3lkajlm7Ljg4Djg6Hjg7zjgrgNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNzU2NjQyMTE4ODIyMjczNTM1NCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoUmFuZ2VEYW1hZ2VWYWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIGRpemgyKCkgLS10ZXN0bW9kdWxlDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjc1NjY0MjExODgyMjI3MzUzNTQiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKG9uZGFoaXZlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gcHVuY2hFU1AoKSAtLXRlc3Rtb2R1bGUNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiaDJEQ0Q1RDYzIDc1RDg1RDYzIiwgZ2cuVFlQRV9CWVRFKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3NTY2NDIxMTg4MjIyNzM1MzU0IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIGNvbnRpbnVvdXNBdHRhY2soKSAtLXRlc3Rtb2R1bGUNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihwdW5jaFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKGNvbnRpbnVvdXNBdHQsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBCbGFja1N3b3JkZGlzYWJsZSgpIC0tdGVzdG1vZHVsZQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoQmxhY2tTd29yZCwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIGNvb2x0aW1lRGlzYWJsZSgpIC0tdGVzdG1vZHVsZQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoQ29vbHRpbWVTQUlWYWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIFVGT2Rpc2FibGUoKSAtLXRlc3Rtb2R1bGUNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihwdW5jaFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKFVGT3ZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gaWNlYXhkaXNhYmxlKCkgLS3jgbTjgaPjgZHjgosNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihwdW5jaFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKGljZWF4dmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiBmbG91cmRpc2FibGUoKSAtLeiKsQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoZmxvd2VydmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiB0b3JpaWRpc2FibGUoKSAtLeOBtOOBo+OBkeOCiw0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIodG9yaWl2YWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCi0tNTg3NDIwODQzNjg5MTUwOTExMg0KDQpmdW5jdGlvbiB0YWlob3VkaXNhYmxlKCkgLS3lpKfnoLINCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNjU1ODI1MjYxMzk3MDkyNTU3MCIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjU4NzQyMDg0MzY4OTE1MDkxMTIiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KLS04LDI4NSwyNTksMjI2LDA4Nyw2MzMsNDMzDQoNCmZ1bmN0aW9uIGh1bXN1dWRpc2FibGUoKSAtLeWkp+egsg0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjcsOTE4LDY4OCwzMzIsODM4LDkxNCw2NDYiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gcHVuY2hyZWNvdmVyeSgpIC0t44OR44Oz44OB44Ki44Kk44K5DQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjcxMTg2Mjc0MzgyNzYwMTQ1OTEiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQotLTkxNTQwMTAzNjE1NjAxNDI4NTfljbXnhKHlirkNCmZ1bmN0aW9uIGVnZ2Rpc2FibGUoKSAtLeODkeODs+ODgeOCouOCpOOCuQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI3MTE4NjI3NDM4Mjc2MDE0NTkxIiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiOTE1NDAxMDM2MTU2MDE0Mjg1NyIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQotLTQsMzY4LDE3NiwyMzQsMzQ4LDA3NywzNTflpInouqsNCg0KZnVuY3Rpb24gaGVuc2luZGlzYWJsZSgpIC0t5aSJ6LqrDQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjcxMTg2Mjc0MzgyNzYwMTQ1OTEiLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI0LDM2OCwxNzYsMjM0LDM0OCwwNzcsMzU3IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCg0KZnVuY3Rpb24gdG91bWVpa2FkaXNhYmxlKCkgLS3pgI/mmI7ljJYNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihwdW5jaFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI5LDEzOSwwNzgsNjA3LDEwNCw0MTQsMzY4IiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCi0tNCw1MTAsMTg0LDU5OSwyNjQsMzkxLDYwOQ0KDQpmdW5jdGlvbiBtZWRhbWF5YWtpRGlzYWJsZSgpIC0t44OR44Oz44OB44Ki44Kk44K5DQogICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9BTk9OWU1PVVMpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIocHVuY2hWYWx1ZSwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCByZXMgPSBnZy5nZXRSZXN1bHRzKDEpDQogICAgaWYgI3JlcyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICANCiAgICBsb2NhbCB2YWwgPSBnZy5nZXRWYWx1ZXMoe3thZGRyZXNzID0gcmVzWzFdLmFkZHJlc3MgKyAweDcwLCBmbGFncyA9IGdnLlRZUEVfUVdPUkR9fSlbMV0udmFsdWUNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiNCw1MTAsMTg0LDU5OSwyNjQsMzkxLDYwOSIsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgd2VhcG9ucyA9IGdnLmdldFJlc3VsdHMoMTAwKQ0KICAgIGlmICN3ZWFwb25zID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIGZvciBfLCB3IGluIGlwYWlycyh3ZWFwb25zKSBkbyANCiAgICAgICAgdy5hZGRyZXNzID0gdy5hZGRyZXNzICsgMHg3MCANCiAgICAgICAgdy52YWx1ZSA9IHZhbCANCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMod2VhcG9ucykNCmVuZA0KDQpmdW5jdGlvbiByeXVzZWlndW5EaXNhYmxlKCkgLS3jg5Hjg7Pjg4HjgqLjgqTjgrkNCiAgICBnZy5zZXRSYW5nZXMoZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNlYXJjaE51bWJlcihwdW5jaFZhbHVlLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHJlcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICBpZiAjcmVzID09IDAgdGhlbiByZXR1cm4gZ2cuYWxlcnQoInZhbHVlIG5vdCBmb3VuZCIpIGVuZA0KICAgIA0KICAgIGxvY2FsIHZhbCA9IGdnLmdldFZhbHVlcyh7e2FkZHJlc3MgPSByZXNbMV0uYWRkcmVzcyArIDB4NzAsIGZsYWdzID0gZ2cuVFlQRV9RV09SRH19KVsxXS52YWx1ZQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCI0MzQxODM1MzY3NDE5MzA0NzgyIiwgZ2cuVFlQRV9RV09SRCkNCiAgICBsb2NhbCB3ZWFwb25zID0gZ2cuZ2V0UmVzdWx0cygxMDApDQogICAgaWYgI3dlYXBvbnMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgZm9yIF8sIHcgaW4gaXBhaXJzKHdlYXBvbnMpIGRvIA0KICAgICAgICB3LmFkZHJlc3MgPSB3LmFkZHJlc3MgKyAweDcwIA0KICAgICAgICB3LnZhbHVlID0gdmFsIA0KICAgIGVuZA0KICAgIGdnLnNldFZhbHVlcyh3ZWFwb25zKQ0KZW5kDQoNCi0tNzE2MDExNjk4MTI3ODgyMTY3Nw0KDQpmdW5jdGlvbiBoYW50ZWltdWtvdURpc2FibGUoKSAtLeODkeODs+ODgeOCouOCpOOCuQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKHB1bmNoVmFsdWUsIGdnLlRZUEVfUVdPUkQpDQogICAgbG9jYWwgcmVzID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgIGlmICNyZXMgPT0gMCB0aGVuIHJldHVybiBnZy5hbGVydCgidmFsdWUgbm90IGZvdW5kIikgZW5kDQogICAgDQogICAgbG9jYWwgdmFsID0gZ2cuZ2V0VmFsdWVzKHt7YWRkcmVzcyA9IHJlc1sxXS5hZGRyZXNzICsgMHg3MCwgZmxhZ3MgPSBnZy5UWVBFX1FXT1JEfX0pWzFdLnZhbHVlDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoIjcxNjAxMTY5ODEyNzg4MjE2NzciLCBnZy5UWVBFX1FXT1JEKQ0KICAgIGxvY2FsIHdlYXBvbnMgPSBnZy5nZXRSZXN1bHRzKDEwMCkNCiAgICBpZiAjd2VhcG9ucyA9PSAwIHRoZW4gcmV0dXJuIGdnLmFsZXJ0KCJ2YWx1ZSBub3QgZm91bmQiKSBlbmQNCiAgICBmb3IgXywgdyBpbiBpcGFpcnMod2VhcG9ucykgZG8gDQogICAgICAgIHcuYWRkcmVzcyA9IHcuYWRkcmVzcyArIDB4NzAgDQogICAgICAgIHcudmFsdWUgPSB2YWwgDQogICAgZW5kDQogICAgZ2cuc2V0VmFsdWVzKHdlYXBvbnMpDQplbmQNCg0KZnVuY3Rpb24gQ2hlc3RNZW51KCkNCiAgICBsb2NhbCBvcHRpb25zID0gew0KICAgICAgICB7IueEoemZkOWuneeusSIsIElORmNoZXN0bWVudX0sDQogICAgICAgIHsiYSIsIENoZXN0TWVudTB9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCmZ1bmN0aW9uIElORmNoZXN0bWVudSgpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoImhBMDg2Mjk0RCBBMDA5ODYwRCIsIGdnLlRZUEVfQllURSkNCiAgICBnZy5yZWZpbmVOdW1iZXIoIi05NiIsIGdnLlRZUEVfQllURSkNCiAgICBsb2NhbCByID0gZ2cuZ2V0UmVzdWx0cyg0MDAwKQ0KICAgIGxvY2FsIGRpemgxID0ge30NCiAgICBsb2NhbCBkaXpoMiA9IDENCiAgICBmb3IgaSA9IDEsICNyIGRvDQogICAgICAgIGRpemgxW2RpemgyXSA9IHt9DQogICAgICAgIGRpemgxW2RpemgyXS5hZGRyZXNzID0gcltpXS5hZGRyZXNzICsgMHgyMA0KICAgICAgICBkaXpoMVtkaXpoMl0uZmxhZ3MgPSBnZy5UWVBFX0ZMT0FUDQogICAgICAgIGRpemgxW2RpemgyXS52YWx1ZSA9IDENCiAgICAgICAgZGl6aDIgPSBkaXpoMiArIDENCiAgICBlbmQNCiAgICBnZy5zZXRWYWx1ZXMoZGl6aDEpDQplbmQNCg0KZnVuY3Rpb24gQ2hlc3RNZW51MCgpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBnZy5zZWFyY2hOdW1iZXIoImg5Rjg5QkY1RSA5RjlGODkxRSIsIGdnLlRZUEVfQllURSwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xLCAwKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiLTk3IiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgbG9jYWwgciA9IGdnLmdldFJlc3VsdHMoMTAwMCkNCiAgICBsb2NhbCBkaXpoMSA9IHt9DQogICAgbG9jYWwgZGl6aDIgPSAxDQogICAgZm9yIGkgPSAxLCAjciBkbw0KICAgICAgZGl6aDFbZGl6aDJdID0ge30NCiAgICAgIGRpemgxW2RpemgyXS5hZGRyZXNzID0gcltpXS5hZGRyZXNzICsgMHg3OA0KICAgICAgZGl6aDFbZGl6aDJdLmZsYWdzID0gZ2cuVFlQRV9EV09SRA0KICAgICAgZGl6aDFbZGl6aDJdLnZhbHVlID0gMQ0KICAgICAgZGl6aDIgPSBkaXpoMiArIDQNCiAgICAgIGkgPSBpICsgMQ0KICAgIGVuZCANCiAgICBnZy5zZXRWYWx1ZXMoZGl6aDEpDQplbmQgIA0KDQpmdW5jdGlvbiBvcHQoKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCJoMDAwMDgwM0ZBQkFBQUEzRThGQzJGNTNDIiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQogICAgcmV2ZXJ0ID0gZ2cuZ2V0UmVzdWx0cygxMDAsIG5pbCwgbmlsLCBuaWwsIG5pbCwgbmlsLCBuaWwsIG5pbCwgbmlsKQ0KICAgIGdnLmVkaXRBbGwoImgwMDAwODAzRkFCQUFBQTNFMDAwMDAwMDAiLCBnZy5UWVBFX0JZVEUpDQogICAgZ2cucHJvY2Vzc1Jlc3VtZSgpDQogICAgZ2cudG9hc3QoIui7vemHj+WMluaIkOWKnyIpDQogICAgZ2cuY2xlYXJSZXN1bHRzKCkNCiAgICBlbmQNCg0KLS0gICAgICAgIGdnLnJlZmluZU51bWJlcigiLTk2IiwgZ2cuVFlQRV9CWVRFLCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEsIDApDQoNCg0KZnVuY3Rpb24geW9rb3Jvd2EoKQ0KICAgIGxvY2FsIG9wdGlvbnMgPSB7DQogICAgICAgIHsiWeWbuuWumiBPTiIsIFlrb3RlaU9mZn0sDQogICAgICAgIHsiWeWbuuWumiBPRkYiLCBZa290ZWlPZmZ9LA0KICAgICAgICB7Iljlm7rlrpogT04iLCBYa290ZWlPbn0sDQogICAgICAgIHsiWOWbuuWumiBPRkYiLCBYa290ZWlPZmZ9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCg0KbG9jYWwgZnJlZXplX2xpc3RfeCA9IHt9DQpsb2NhbCBmcmVlemVfbGlzdF95ID0ge30NCg0KZnVuY3Rpb24gWWtvdGVpT24oKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCIxNzE3MDQzNiIsIGdnLlRZUEVfRFdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICBsb2NhbCByZXN1bHRzID0gZ2cuZ2V0UmVzdWx0cyhnZy5nZXRSZXN1bHRDb3VudCgpKQ0KDQogICAgaWYgI3Jlc3VsdHMgPiAwIHRoZW4NCiAgICAgICAgZnJlZXplX2xpc3RfeSA9IHt9DQogICAgICAgIGZvciBpID0gMSwgI3Jlc3VsdHMgZG8NCiAgICAgICAgICAgIGZyZWV6ZV9saXN0X3lbaV0gPSB7DQogICAgICAgICAgICAgICAgYWRkcmVzcyA9IHJlc3VsdHNbaV0uYWRkcmVzcyAtIDgsIA0KICAgICAgICAgICAgICAgIGZsYWdzID0gZ2cuVFlQRV9GTE9BVCwNCiAgICAgICAgICAgICAgICB2YWx1ZSA9IDIwLA0KICAgICAgICAgICAgICAgIGZyZWV6ZSA9IHRydWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgZW5kDQogICAgICAgIGdnLnNldFZhbHVlcyhmcmVlemVfbGlzdF95KQ0KICAgICAgICBnZy5hZGRMaXN0SXRlbXMoZnJlZXplX2xpc3RfeSkNCiAgICAgICAgZ2cudG9hc3QoIlnluqfmqJnjg5Xjg6rjg7zjgrogT04iKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gWWtvdGVpT2ZmKCkNCiAgICBpZiAjZnJlZXplX2xpc3RfeSA+IDAgdGhlbg0KICAgICAgICBnZy5yZW1vdmVMaXN0SXRlbXMoZnJlZXplX2xpc3RfeSkNCiAgICAgICAgZ2cudG9hc3QoIlnluqfmqJnjg5Xjg6rjg7zjgrogT0ZGIikNCiAgICBlbHNlDQogICAgICAgIGdnLnRvYXN0KCLjg5Xjg6rjg7zjgrrjgZnjgovpoIXnm67jgYzopovjgaTjgYvjgorjgb7jgZvjgpMiKQ0KICAgIGVuZA0KZW5kDQoNCg0KDQoNCg0KZnVuY3Rpb24gWGtvdGVpT24oKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLmNsZWFyUmVzdWx0cygpDQogICAgZ2cuc2VhcmNoTnVtYmVyKCIxNzE3MDQzNiIsIGdnLlRZUEVfRFdPUkQsIGZhbHNlLCBnZy5TSUdOX0VRVUFMLCAwLCAtMSwgMCkNCiAgICBsb2NhbCByZXN1bHRzID0gZ2cuZ2V0UmVzdWx0cyhnZy5nZXRSZXN1bHRDb3VudCgpKQ0KDQogICAgaWYgI3Jlc3VsdHMgPiAwIHRoZW4NCiAgICAgICAgZnJlZXplX2xpc3RfeCA9IHt9DQogICAgICAgIGZvciBpID0gMSwgI3Jlc3VsdHMgZG8NCiAgICAgICAgICAgIGZyZWV6ZV9saXN0X3hbaV0gPSB7DQogICAgICAgICAgICAgICAgYWRkcmVzcyA9IHJlc3VsdHNbaV0uYWRkcmVzcyAtIDEyLA0KICAgICAgICAgICAgICAgIGZsYWdzID0gZ2cuVFlQRV9GTE9BVCwNCiAgICAgICAgICAgICAgICB2YWx1ZSA9IDAsDQogICAgICAgICAgICAgICAgZnJlZXplID0gdHJ1ZQ0KICAgICAgICAgICAgfQ0KICAgICAgICBlbmQNCiAgICAgICAgZ2cuc2V0VmFsdWVzKGZyZWV6ZV9saXN0X3gpDQogICAgICAgIGdnLmFkZExpc3RJdGVtcyhmcmVlemVfbGlzdF94KQ0KICAgICAgICBnZy50b2FzdCgiWOW6p+aomeODleODquODvOOCuiBPTiIpDQogICAgZWxzZQ0KICAgICAgICBnZy50b2FzdCgi5qSc57Si57WQ5p6c44GM6KaL44Gk44GL44KK44G+44Gb44KT44Gn44GX44GfIikNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBYa290ZWlPZmYoKQ0KICAgIGlmICNmcmVlemVfbGlzdF94ID4gMCB0aGVuDQogICAgICAgIGdnLnJlbW92ZUxpc3RJdGVtcyhmcmVlemVfbGlzdF94KQ0KICAgICAgICBnZy50b2FzdCgiWOW6p+aomeODleODquODvOOCuiBPRkYiKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuODleODquODvOOCuuOBmeOCi+mgheebruOBjOimi+OBpOOBi+OCiuOBvuOBm+OCkyIpDQogICAgZW5kDQplbmQNCg0KDQpmdW5jdGlvbiB1bmtvKCkNCiAgICBsb2NhbCBvcHRpb25zID0gew0KICAgICAgICB7IuimlumHjuinkuWkieabtCBPTiIsIEZPVmRpc3RhbmNlfSwNCiAgICAgICAgeyLoppbph47op5LlpInmm7QgT0ZGIiwgRk9WZGlzdGFuY2VPZmZ9LA0KICAgIH0NCiAgICBsb2NhbCBsYWJlbHMgPSB7fQ0KICAgIGZvciBpID0gMSwgI29wdGlvbnMgZG8NCiAgICAgICAgbGFiZWxzW2ldID0gb3B0aW9uc1tpXVsxXQ0KICAgIGVuZA0KICAgIGxvY2FsIHNpdWJvID0gZ2cubXVsdGlDaG9pY2UobGFiZWxzLCBuaWwsICdQbGF5aW5Fc2NhcGVQcm8nKQ0KICAgIGlmIHNpdWJvID09IG5pbCB0aGVuIHJldHVybiBlbmQNCiAgICBmb3IgaSA9IDEsICNvcHRpb25zIGRvDQogICAgICAgIGlmIHNpdWJvW2ldIHRoZW4NCiAgICAgICAgICAgIG9wdGlvbnNbaV1bMl0oKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIFlVTkkgPSAtMg0KZW5kDQoNCg0KZnVuY3Rpb24gRk9WZGlzdGFuY2UoKQ0KICAgIGxvY2FsIHByZXZpb3VzSXRlbXMgPSBnZy5nZXRMaXN0SXRlbXMoKQ0KICAgIGlmICNwcmV2aW91c0l0ZW1zID4gMCB0aGVuDQogICAgICAgIGdnLnJlbW92ZUxpc3RJdGVtcyhwcmV2aW91c0l0ZW1zKQ0KICAgICAgICBnZy50b2FzdCgi5Lul5YmN44Gu44OV44Oq44O844K644Oq44K544OI44KS5YmK6Zmk44GX44G+44GX44GfIikNCiAgICBlbmQNCiAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgIGdnLnNldFJhbmdlcyhnZy5SRUdJT05fQU5PTllNT1VTKQ0KICAgIGdnLnNlYXJjaE51bWJlcigiLTYuNTA7My4wIiwgZ2cuVFlQRV9GTE9BVCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIDAsIC0xKQ0KICAgIGdnLnJlZmluZU51bWJlcigiLTYuNTAiLCBnZy5UWVBFX0ZMT0FULCBmYWxzZSwgZ2cuU0lHTl9FUVVBTCwgMCwgLTEpDQogICAgbG9jYWwgYSA9IGdnLmdldFJlc3VsdHMoNSkNCiAgICBpZiAjYSA+IDAgdGhlbg0KICAgICAgICBmb3IgaSwgdiBpbiBpcGFpcnMoYSkgZG8NCiAgICAgICAgICAgIHYudmFsdWUgPSAiLTE1Ig0KICAgICAgICAgICAgdi5mcmVlemUgPSB0cnVlDQogICAgICAgIGVuZA0KICAgICAgICBnZy5zZXRWYWx1ZXMoYSkNCiAgICAgICAgZ2cuYWRkTGlzdEl0ZW1zKGEpDQogICAgICAgIGdnLnRvYXN0KCLoppbph47op5LjgYzlpInmm7Tjg7vlm7rlrprjgZXjgozjgb7jgZfjgZ8iKQ0KICAgIGVsc2UNCiAgICAgICAgZ2cudG9hc3QoIuaknOe0oue1kOaenOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBnyIpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gRk9WZGlzdGFuY2VPZmYoKQ0KICAgIGxvY2FsIHByZXZpb3VzSXRlbXMgPSBnZy5nZXRMaXN0SXRlbXMoKQ0KICAgIGlmICNwcmV2aW91c0l0ZW1zID4gMCB0aGVuDQogICAgICAgIGdnLnJlbW92ZUxpc3RJdGVtcyhwcmV2aW91c0l0ZW1zKQ0KICAgICAgICBnZy50b2FzdCgi6KaW6YeO6KeS44Gu5Zu65a6a44KS6Kej6Zmk44GX44G+44GX44GfIikNCiAgICBlbHNlDQogICAgICAgIGdnLnRvYXN0KCLop6PpmaTjgZnjgovjg5Xjg6rjg7zjgrrjg6rjgrnjg4jjga/jgYLjgorjgb7jgZvjgpMiKQ0KICAgIGVuZA0KZW5kDQoNCllVTkkgPSAtMQ0Kd2hpbGUgdHJ1ZSBkbw0KICAgIGlmIGdnLmlzVmlzaWJsZSh0cnVlKSB0aGVuDQogICAgICAgIFlVTkkgPSAxDQogICAgICAgIGdnLnNldFZpc2libGUoZmFsc2UpDQogICAgZW5kDQogICAgaWYgWVVOSSA9PSAxIHRoZW4NCiAgICAgICAgaWYgcHJvbXB0X3Bhc3N3b3JkKCkgdGhlbg0KICAgICAgICAgICAgTWFpbigpDQogICAgICAgIGVuZA0KICAgICAgICBZVU5JID0gLTENCiAgICBlbmQNCmVuZA0K'

local decoded_code = base64_decode(encoded_code)
load(decoded_code)()
